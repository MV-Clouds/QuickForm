import React, { useState, useEffect, useCallback, useMemo } from "react";
import { PayPalScriptProvider, PayPalButtons } from "@paypal/react-paypal-js";
import PayPalCardPayment from "../components/PayPalCardPayment";
import GooglePayIntegration from "../components/GooglePayIntegration";
import PayPalDonateButton from "../components/PayPalDonateButton";
import PaymentStatusCallout from "../components/PaymentStatusCallout";
import PaymentMethodSelector from "../components/PaymentMethodSelector";
import PaymentLoadingScreen from "../components/PaymentLoadingScreen";
import { FaSpinner, FaCreditCard, FaPaypal, FaGooglePay, FaExclamationTriangle, FaCheckCircle } from "react-icons/fa";
import {
  fetchMerchantCredentialsWithCache,
  validateMerchantCredentials,
  handleCredentialError,
} from "../utils/merchantCredentials";
import {
  formatCurrency,
  generateItemNumber,
  getPaymentButtonLabel,
  getPaymentButtonColor,
} from "../utils/paymentHelpers";
import { validatePaymentAmount } from "../utils/paymentValidation";

// PayPal credentials
const SANDBOX_CLIENT_ID = "AbYnm03NLihzGgGlRFtdNt2jx3rHYOSZySVeFE-VIsY2C0khi8zfHn1uVq4zq7yPOwKg4ynE0-jJKvYD";
const PRODUCTION_CLIENT_ID = "YOUR_PRODUCTION_CLIENT_ID";

/**\n * Enhanced PayPal Payment Provider for Public Forms\n * Fixes payment methods visibility and improves user experience\n */\nconst PayPalPaymentProviderEnhanced = ({\n  fieldConfig,\n  formValues,\n  onPaymentSuccess,\n  onPaymentError,\n  onPaymentCancel,\n  onPaymentRequirementChange,\n  isLastPage,\n  isProduction = false,\n  className = \"\",\n  validateForm,\n}) => {\n  // Extract field configuration\n  const subFields = useMemo(() => fieldConfig?.subFields || {}, [fieldConfig?.subFields]);\n  const {\n    paymentType = \"product_wise\",\n    merchantId,\n    merchantAccountId,\n    amount: amountConfig = {},\n    donationButtonId,\n    paymentMethods = {},\n    products = [],\n    subscriptions = [],\n    behavior = {},\n  } = subFields;\n\n  // Use merchantAccountId if available, fallback to merchantId\n  const accountIdentifier = merchantAccountId || merchantId;\n\n  // State management\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState(\"\");\n  const [paymentAmount, setPaymentAmount] = useState(\"\");\n  const [currentItemNumber, setCurrentItemNumber] = useState(\"\");\n  const [selectedProduct, setSelectedProduct] = useState(null);\n  const [selectedSubscription, setSelectedSubscription] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [paymentCompleted, setPaymentCompleted] = useState(false);\n  const [amountError, setAmountError] = useState(\"\");\n  const [paymentError, setPaymentError] = useState(\"\");\n  const [formValidationPassed, setFormValidationPassed] = useState(false);\n  \n  // Merchant credentials state\n  const [merchantCredentials, setMerchantCredentials] = useState(null);\n  const [credentialsLoading, setCredentialsLoading] = useState(false);\n  const [credentialsError, setCredentialsError] = useState(null);\n\n  // Debug logging\n  console.log(\"🚀 PayPal Payment Provider Enhanced - Configuration:\", {\n    paymentType,\n    paymentMethods,\n    accountIdentifier,\n    isLastPage,\n    fieldConfig,\n    subFields,\n  });\n\n  // Fetch merchant credentials\n  useEffect(() => {\n    const fetchCredentials = async () => {\n      if (!accountIdentifier) {\n        setCredentialsError(\"No merchant account identifier provided\");\n        return;\n      }\n\n      // Check if it's a legacy direct merchant ID\n      const salesforceIdPattern = /^[a-zA-Z0-9]{15}$|^[a-zA-Z0-9]{18}$/;\n      if (!salesforceIdPattern.test(accountIdentifier)) {\n        console.log(\"🔄 Using legacy direct merchant ID:\", accountIdentifier);\n        setMerchantCredentials({\n          provider: \"paypal\",\n          merchantId: accountIdentifier,\n          environment: isProduction ? \"production\" : \"sandbox\",\n          isActive: true,\n          capabilities: {\n            cards: true,\n            googlePay: true,\n            venmo: true,\n            paypal: true,\n          },\n        });\n        return;\n      }\n\n      // Fetch credentials from Salesforce\n      setCredentialsLoading(true);\n      setCredentialsError(null);\n\n      try {\n        console.log(\"🔐 Fetching merchant credentials for account ID:\", accountIdentifier);\n        const credentialsResponse = await fetchMerchantCredentialsWithCache(accountIdentifier);\n\n        if (!credentialsResponse.success) {\n          throw new Error(credentialsResponse.message || \"Failed to fetch credentials\");\n        }\n\n        const credentials = credentialsResponse.credentials;\n        if (!validateMerchantCredentials(credentials)) {\n          throw new Error(\"Invalid merchant credentials received\");\n        }\n\n        console.log(\"✅ Successfully fetched merchant credentials:\", credentials);\n        setMerchantCredentials(credentials);\n      } catch (error) {\n        console.error(\"❌ Error fetching merchant credentials:\", error);\n        const errorResponse = handleCredentialError(error);\n        setCredentialsError(errorResponse.message);\n      } finally {\n        setCredentialsLoading(false);\n      }\n    };\n\n    fetchCredentials();\n  }, [accountIdentifier, isProduction]);\n\n  // Merchant capabilities with enhanced defaults\n  const merchantCapabilities = useMemo(() => {\n    if (!merchantCredentials) {\n      return {\n        cards: true,\n        googlePay: true,\n        venmo: true,\n        paypal: true,\n      };\n    }\n\n    const capabilities = merchantCredentials.capabilities || {};\n    return {\n      cards: capabilities.cards !== false,\n      googlePay: capabilities.googlePay || capabilities.googlepay || false,\n      venmo: capabilities.venmo || false,\n      paypal: true, // Always available\n      ...capabilities,\n    };\n  }, [merchantCredentials]);\n\n  // Enhanced payment methods detection\n  const getAvailablePaymentMethods = useCallback(() => {\n    const methods = [];\n    \n    console.log(\"🔍 Enhanced payment methods detection:\", {\n      paymentMethods,\n      merchantCapabilities,\n      paymentType,\n    });\n\n    // PayPal - always available unless explicitly disabled\n    if (paymentMethods.paypal !== false) {\n      methods.push({\n        id: \"paypal\",\n        name: \"PayPal\",\n        icon: FaPaypal,\n        description: \"Pay with your PayPal account\",\n        color: \"#0070ba\",\n        priority: 1,\n      });\n    }\n\n    // Cards - available by default unless explicitly disabled\n    if (paymentMethods.cards !== false && merchantCapabilities.cards) {\n      methods.push({\n        id: \"card\",\n        name: \"Credit/Debit Card\",\n        icon: FaCreditCard,\n        description: \"Pay with your card\",\n        color: \"#6b7280\",\n        priority: 2,\n      });\n    }\n\n    // Google Pay - only if explicitly enabled and supported\n    if (paymentMethods.googlePay === true && merchantCapabilities.googlePay) {\n      methods.push({\n        id: \"googlepay\",\n        name: \"Google Pay\",\n        icon: FaGooglePay,\n        description: \"Fast, secure payments with Google Pay\",\n        color: \"#4285f4\",\n        priority: 3,\n      });\n    }\n\n    // Venmo - only if explicitly enabled and supported\n    if (paymentMethods.venmo === true && merchantCapabilities.venmo) {\n      methods.push({\n        id: \"venmo\",\n        name: \"Venmo\",\n        icon: FaCreditCard,\n        description: \"Fast, secure mobile payments\",\n        color: \"#3d95ce\",\n        priority: 4,\n      });\n    }\n\n    // Sort by priority\n    methods.sort((a, b) => a.priority - b.priority);\n\n    console.log(\"✅ Enhanced available payment methods:\", methods);\n    return methods;\n  }, [paymentMethods, merchantCapabilities]);\n\n  // Auto-select payment method\n  useEffect(() => {\n    const availableMethods = getAvailablePaymentMethods();\n    if (availableMethods.length === 1 && !selectedPaymentMethod) {\n      setSelectedPaymentMethod(availableMethods[0].id);\n      console.log(\"🔍 Auto-selected payment method:\", availableMethods[0].id);\n    } else if (availableMethods.length > 1 && !selectedPaymentMethod) {\n      // Default to PayPal if multiple methods available\n      const paypalMethod = availableMethods.find(m => m.id === \"paypal\");\n      if (paypalMethod) {\n        setSelectedPaymentMethod(\"paypal\");\n        console.log(\"🔍 Default selected payment method: PayPal\");\n      } else {\n        setSelectedPaymentMethod(availableMethods[0].id);\n        console.log(\"🔍 Default selected payment method:\", availableMethods[0].id);\n      }\n    }\n  }, [getAvailablePaymentMethods, selectedPaymentMethod]);\n\n  // Initialize payment amount based on type\n  useEffect(() => {\n    if (paymentType === \"custom_amount\" && amountConfig.type === \"static\" && amountConfig.value) {\n      setPaymentAmount(amountConfig.value.toString());\n      setCurrentItemNumber(generateItemNumber(fieldConfig.id || fieldConfig.fieldId, \"static\"));\n    }\n  }, [paymentType, amountConfig, fieldConfig]);\n\n  // Form validation check\n  useEffect(() => {\n    if (validateForm && isLastPage) {\n      const isValid = validateForm();\n      setFormValidationPassed(isValid);\n    } else {\n      setFormValidationPassed(true);\n    }\n  }, [validateForm, isLastPage, formValues]);\n\n  // Payment requirement change notification\n  useEffect(() => {\n    if (onPaymentRequirementChange) {\n      const requiresPayment = paymentType !== \"donation_button\" && isLastPage;\n\n      onPaymentRequirementChange({\n        requiresPayment,\n        paymentCompleted,\n        hideSubmitButton: requiresPayment && !paymentCompleted,\n        autoSubmit: paymentCompleted && requiresPayment,\n      });\n    }\n  }, [paymentType, isLastPage, paymentCompleted, onPaymentRequirementChange]);\n\n  // Amount handling with enhanced validation\n  const handleAmountChange = useCallback((value) => {\n    setPaymentAmount(value);\n    setAmountError(\"\");\n\n    if (value) {\n      const validation = validatePaymentAmount(value, amountConfig);\n      if (!validation.isValid) {\n        setAmountError(validation.error);\n      }\n    }\n  }, [amountConfig]);\n\n  // Product selection handler\n  const handleProductSelection = useCallback((product) => {\n    setSelectedProduct(product);\n    setPaymentAmount(product.price.toString());\n    setCurrentItemNumber(generateItemNumber(fieldConfig.id || fieldConfig.fieldId, product.id));\n    setAmountError(\"\");\n    console.log(\"🛍️ Product selected:\", product.name, \"Price:\", product.price);\n  }, [fieldConfig]);\n\n  // Subscription selection handler\n  const handleSubscriptionSelection = useCallback((subscription) => {\n    setSelectedSubscription(subscription);\n    setPaymentAmount(subscription.price.toString());\n    setCurrentItemNumber(generateItemNumber(fieldConfig.id || fieldConfig.fieldId, subscription.id));\n    setAmountError(\"\");\n    console.log(\"📅 Subscription selected:\", subscription.name, \"Price:\", subscription.price);\n  }, [fieldConfig]);\n\n  // Payment readiness check\n  const isPaymentInputReady = useCallback(() => {\n    if (paymentType === \"donation_button\") {\n      return !!donationButtonId;\n    }\n\n    if (paymentType === \"product_wise\") {\n      return !!selectedProduct && !!paymentAmount && !!currentItemNumber;\n    }\n\n    if (paymentType === \"subscription\") {\n      return !!selectedSubscription && !!paymentAmount && !!currentItemNumber;\n    }\n\n    if (paymentType === \"custom_amount\" && amountConfig.type === \"static\") {\n      return !!amountConfig.value;\n    }\n\n    return !!paymentAmount && !amountError;\n  }, [paymentType, selectedProduct, selectedSubscription, paymentAmount, currentItemNumber, amountError, donationButtonId, amountConfig]);\n\n  const isPaymentButtonReady = useCallback(() => {\n    if (!isLastPage && paymentType !== \"donation_button\") {\n      return false;\n    }\n\n    if (!selectedPaymentMethod) {\n      return false;\n    }\n\n    if (!isPaymentInputReady()) {\n      return false;\n    }\n\n    // For non-donation types, require form validation on last page\n    if (paymentType !== \"donation_button\" && isLastPage) {\n      return formValidationPassed;\n    }\n\n    return true;\n  }, [isLastPage, selectedPaymentMethod, isPaymentInputReady, formValidationPassed, paymentType]);\n\n  // PayPal SDK options\n  const sdkOptions = useMemo(() => {\n    const clientId = isProduction ? PRODUCTION_CLIENT_ID : SANDBOX_CLIENT_ID;\n\n    // Build funding options based on merchant capabilities\n    const enabledFunding = [];\n    if (merchantCapabilities.venmo) enabledFunding.push(\"venmo\");\n    if (merchantCapabilities.cards) enabledFunding.push(\"card\");\n\n    return {\n      \"client-id\": clientId,\n      \"merchant-id\": merchantCredentials?.merchantId || accountIdentifier,\n      currency: amountConfig.currency || \"USD\",\n      components: \"buttons,card-fields,funding-eligibility,googlepay\",\n      vault: paymentType === \"subscription\" ? \"true\" : \"false\",\n      intent: paymentType === \"subscription\" ? \"subscription\" : \"capture\",\n      ...(enabledFunding.length > 0 && {\n        \"enable-funding\": enabledFunding.join(\",\"),\n      }),\n      \"disable-funding\": \"credit\",\n    };\n  }, [isProduction, merchantCredentials, accountIdentifier, amountConfig.currency, paymentType, merchantCapabilities]);\n\n  // Create PayPal order\n  const createOrder = useCallback(async (data, actions) => {\n    setIsProcessing(true);\n    setPaymentError(\"\");\n    \n    try {\n      const orderData = {\n        intent: \"CAPTURE\",\n        purchase_units: [{\n          amount: {\n            currency_code: amountConfig.currency || \"USD\",\n            value: paymentAmount,\n          },\n          description: getPaymentDescription(),\n          custom_id: currentItemNumber,\n        }],\n        application_context: {\n          brand_name: \"QuickForm\",\n          landing_page: \"NO_PREFERENCE\",\n          user_action: \"PAY_NOW\",\n          return_url: window.location.href,\n          cancel_url: window.location.href,\n        },\n      };\n\n      console.log(\"💳 Creating PayPal order:\", orderData);\n      return actions.order.create(orderData);\n    } catch (error) {\n      console.error(\"❌ Error creating PayPal order:\", error);\n      setPaymentError(\"Failed to create payment order. Please try again.\");\n      setIsProcessing(false);\n      throw error;\n    }\n  }, [paymentAmount, amountConfig.currency, currentItemNumber]);\n\n  // Handle payment approval\n  const onApprove = useCallback(async (data, actions) => {\n    try {\n      console.log(\"✅ Payment approved, capturing order:\", data.orderID);\n      \n      const order = await actions.order.capture();\n      console.log(\"💰 Payment captured successfully:\", order);\n      \n      setPaymentCompleted(true);\n      setIsProcessing(false);\n      \n      // Prepare payment data for form submission\n      const paymentData = {\n        fieldId: fieldConfig.id || fieldConfig.fieldId,\n        orderId: data.orderID,\n        transactionId: order.id,\n        amount: paymentAmount,\n        currency: amountConfig.currency || \"USD\",\n        paymentType,\n        paymentMethod: selectedPaymentMethod,\n        merchantId: accountIdentifier,\n        itemNumber: currentItemNumber,\n        selectedProduct,\n        selectedSubscription,\n        captureResult: order,\n        completedAt: new Date().toISOString(),\n      };\n\n      console.log(\"💳 Payment data prepared for submission:\", paymentData);\n      onPaymentSuccess?.(paymentData);\n    } catch (error) {\n      console.error(\"❌ Error capturing payment:\", error);\n      setPaymentError(\"Payment processing failed. Please try again.\");\n      setIsProcessing(false);\n      onPaymentError?.(error);\n    }\n  }, [fieldConfig, paymentAmount, amountConfig.currency, paymentType, selectedPaymentMethod, accountIdentifier, currentItemNumber, selectedProduct, selectedSubscription, onPaymentSuccess, onPaymentError]);\n\n  // Handle payment cancellation\n  const onCancel = useCallback((data) => {\n    console.log(\"⚠️ Payment cancelled:\", data);\n    setIsProcessing(false);\n    setPaymentError(\"\");\n    onPaymentCancel?.(data);\n  }, [onPaymentCancel]);\n\n  // Handle payment error\n  const onError = useCallback((err) => {\n    console.error(\"❌ Payment error:\", err);\n    setIsProcessing(false);\n    setPaymentError(\"Payment failed. Please try again or use a different payment method.\");\n    onPaymentError?.(err);\n  }, [onPaymentError]);\n\n  // Get payment description\n  const getPaymentDescription = useCallback(() => {\n    if (selectedProduct) {\n      return `Product: ${selectedProduct.name}`;\n    }\n    if (selectedSubscription) {\n      return `Subscription: ${selectedSubscription.name}`;\n    }\n    if (paymentType === \"donation\") {\n      return \"Donation\";\n    }\n    return \"Payment\";\n  }, [selectedProduct, selectedSubscription, paymentType]);\n\n  // Show loading screen while credentials are loading\n  if (credentialsLoading) {\n    return <PaymentLoadingScreen message=\"Loading payment options...\" />;\n  }\n\n  // Show error if credentials failed to load\n  if (credentialsError) {\n    return (\n      <PaymentStatusCallout\n        type=\"error\"\n        title=\"Payment Configuration Error\"\n        message={credentialsError}\n      />\n    );\n  }\n\n  return (\n    <PayPalScriptProvider options={sdkOptions}>\n      <div className={`paypal-payment-provider-enhanced ${className}`}>\n        {/* Payment method selection */}\n        <PaymentMethodSelector\n          availableMethods={getAvailablePaymentMethods()}\n          selectedMethod={selectedPaymentMethod}\n          onMethodSelect={setSelectedPaymentMethod}\n        />\n        \n        {/* Payment processing indicator */}\n        {isProcessing && (\n          <PaymentStatusCallout\n            type=\"info\"\n            title=\"Processing Payment...\"\n            message=\"Please wait while we process your payment.\"\n            icon={<FaSpinner className=\"animate-spin\" />}\n          />\n        )}\n        \n        {/* Payment error display */}\n        {paymentError && (\n          <PaymentStatusCallout\n            type=\"error\"\n            title=\"Payment Error\"\n            message={paymentError}\n            icon={<FaExclamationTriangle />}\n          />\n        )}\n        \n        {/* Payment completion success */}\n        {paymentCompleted && (\n          <PaymentStatusCallout\n            type=\"success\"\n            title=\"Payment Completed Successfully!\"\n            message=\"Your payment has been processed. The form will be submitted automatically.\"\n            icon={<FaCheckCircle />}\n          />\n        )}\n\n        {/* Payment content based on selected method */}\n        {selectedPaymentMethod && !paymentCompleted && (\n          <PaymentContent\n            paymentMethod={selectedPaymentMethod}\n            paymentType={paymentType}\n            subFields={subFields}\n            paymentAmount={paymentAmount}\n            amountError={amountError}\n            selectedProduct={selectedProduct}\n            selectedSubscription={selectedSubscription}\n            onAmountChange={handleAmountChange}\n            onProductSelection={handleProductSelection}\n            onSubscriptionSelection={handleSubscriptionSelection}\n            createOrder={createOrder}\n            onApprove={onApprove}\n            onCancel={onCancel}\n            onError={onError}\n            isPaymentButtonReady={isPaymentButtonReady()}\n            isProcessing={isProcessing}\n            merchantCredentials={merchantCredentials}\n          />\n        )}\n        \n        {/* Form validation message */}\n        {isLastPage && !formValidationPassed && paymentType !== \"donation_button\" && (\n          <PaymentStatusCallout\n            type=\"warning\"\n            title=\"Form Validation Required\"\n            message=\"Please complete all required fields before proceeding with payment.\"\n          />\n        )}\n      </div>\n    </PayPalScriptProvider>\n  );\n};\n\nexport default PayPalPaymentProviderEnhanced;
{"ast":null,"code":"import React from'react';import{Navigate,useLocation}from'react-router-dom';import{jsx as _jsx}from\"react/jsx-runtime\";const ProtectedRoute=_ref=>{let{element}=_ref;const location=useLocation();// Get the current route location\nconst queryParams=new URLSearchParams(location.search);// Parse the query parameters from the URL\nconst queryUserId=queryParams.get('userId');// Extract userId from query string\nconst queryInstanceUrl=queryParams.get('instanceUrl');// Extract instanceUrl from query string\nconst sessionUserId=sessionStorage.getItem('userId');// Get userId from sessionStorage\nconst sessionInstanceUrl=sessionStorage.getItem('instanceUrl');// Get instanceUrl from sessionStorage\nconst hasValidSession=sessionUserId&&sessionInstanceUrl||queryUserId&&queryInstanceUrl;// Determine if session or query params are present and valid\nif(!hasValidSession){return/*#__PURE__*/_jsx(Navigate,{to:\"/\",replace:true});// Redirect to home if not authenticated\n}return element;// Render the protected component if valid session exists\n};export default ProtectedRoute;","map":{"version":3,"names":["React","Navigate","useLocation","jsx","_jsx","ProtectedRoute","_ref","element","location","queryParams","URLSearchParams","search","queryUserId","get","queryInstanceUrl","sessionUserId","sessionStorage","getItem","sessionInstanceUrl","hasValidSession","to","replace"],"sources":["C:/Users/MVclouds/Desktop/QuickForm/Merged Mapping QF/QuickForm/QuickForm-Romit-Kajal-Merge/quick-form-app/src/components/login-page/protectedRoute.js"],"sourcesContent":["import React from 'react';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\n\r\nconst ProtectedRoute = ({ element }) => {\r\n  const location = useLocation(); // Get the current route location\r\n\r\n  const queryParams = new URLSearchParams(location.search); // Parse the query parameters from the URL\r\n  const queryUserId = queryParams.get('userId'); // Extract userId from query string\r\n  const queryInstanceUrl = queryParams.get('instanceUrl'); // Extract instanceUrl from query string\r\n\r\n  const sessionUserId = sessionStorage.getItem('userId'); // Get userId from sessionStorage\r\n  const sessionInstanceUrl = sessionStorage.getItem('instanceUrl'); // Get instanceUrl from sessionStorage\r\n\r\n  const hasValidSession =\r\n    (sessionUserId && sessionInstanceUrl) ||\r\n    (queryUserId && queryInstanceUrl); // Determine if session or query params are present and valid\r\n\r\n  if (!hasValidSession) {\r\n    return <Navigate to=\"/\" replace />; // Redirect to home if not authenticated\r\n  }\r\n\r\n  return element; // Render the protected component if valid session exists\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,QAAQ,CAAEC,WAAW,KAAQ,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEzD,KAAM,CAAAC,cAAc,CAAGC,IAAA,EAAiB,IAAhB,CAAEC,OAAQ,CAAC,CAAAD,IAAA,CACjC,KAAM,CAAAE,QAAQ,CAAGN,WAAW,CAAC,CAAC,CAAE;AAEhC,KAAM,CAAAO,WAAW,CAAG,GAAI,CAAAC,eAAe,CAACF,QAAQ,CAACG,MAAM,CAAC,CAAE;AAC1D,KAAM,CAAAC,WAAW,CAAGH,WAAW,CAACI,GAAG,CAAC,QAAQ,CAAC,CAAE;AAC/C,KAAM,CAAAC,gBAAgB,CAAGL,WAAW,CAACI,GAAG,CAAC,aAAa,CAAC,CAAE;AAEzD,KAAM,CAAAE,aAAa,CAAGC,cAAc,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAE;AACxD,KAAM,CAAAC,kBAAkB,CAAGF,cAAc,CAACC,OAAO,CAAC,aAAa,CAAC,CAAE;AAElE,KAAM,CAAAE,eAAe,CAClBJ,aAAa,EAAIG,kBAAkB,EACnCN,WAAW,EAAIE,gBAAiB,CAAE;AAErC,GAAI,CAACK,eAAe,CAAE,CACpB,mBAAOf,IAAA,CAACH,QAAQ,EAACmB,EAAE,CAAC,GAAG,CAACC,OAAO,MAAE,CAAC,CAAE;AACtC,CAEA,MAAO,CAAAd,OAAO,CAAE;AAClB,CAAC,CAED,cAAe,CAAAF,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
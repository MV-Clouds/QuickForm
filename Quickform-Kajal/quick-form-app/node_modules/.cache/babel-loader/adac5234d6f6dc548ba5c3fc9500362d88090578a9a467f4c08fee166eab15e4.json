{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { useState, useRef, useCallback } from 'react';\nimport isNil from 'lodash/isNil';\nimport { TREE_NODE_DROP_POSITION } from \"../../internals/constants/index.js\";\nimport { useEventCallback } from \"../../internals/hooks/index.js\";\nimport { shallowEqual as equal, stringifyReactNode } from \"../../internals/utils/index.js\";\nimport { useItemDataKeys } from \"../../internals/Tree/TreeProvider.js\";\n/**\n * The gap between tree nodes.\n */\nvar TREE_NODE_GAP = 4;\n\n/**\n * Calculates the drop position of a tree node based on the clientY coordinate of a drag event\n * and the bounding rectangle of the tree node element.\n *\n * @param event - The drag event.\n * @param treeNodeElement - The element representing the tree node.\n * @returns The drop position of the tree node.\n */\nfunction calDropNodePosition(event, treeNodeElement) {\n  var clientY = event.clientY;\n  var _treeNodeElement$getB = treeNodeElement.getBoundingClientRect(),\n    top = _treeNodeElement$getB.top,\n    bottom = _treeNodeElement$getB.bottom;\n  var gap = TREE_NODE_GAP;\n\n  // bottom of node\n  if (clientY >= bottom - gap && clientY <= bottom) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM;\n  }\n\n  // top of node\n  if (clientY <= top + gap && clientY >= top) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER_TOP;\n  }\n  if (clientY >= top + gap && clientY <= bottom - gap) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER;\n  }\n  return -1;\n}\n\n/**\n * Creates a drag preview element for tree nodes.\n */\nfunction createDragPreview(name, className) {\n  var dragPreview = document.createElement('div');\n  dragPreview.id = 'rs-tree-drag-preview';\n  dragPreview.dataset.testid = 'drag-preview';\n  dragPreview.innerHTML = name;\n  dragPreview.classList.add(className);\n  document.body.appendChild(dragPreview);\n  return dragPreview;\n}\n\n/**\n * Removes the drag preview element from the DOM.\n */\nfunction removeDragPreview() {\n  var _dragPreview$parentNo, _dragPreview$parentNo2;\n  var dragPreview = document.getElementById('rs-tree-drag-preview');\n  dragPreview === null || dragPreview === void 0 || (_dragPreview$parentNo = dragPreview.parentNode) === null || _dragPreview$parentNo === void 0 || (_dragPreview$parentNo2 = _dragPreview$parentNo.removeChild) === null || _dragPreview$parentNo2 === void 0 || _dragPreview$parentNo2.call(_dragPreview$parentNo, dragPreview);\n}\n/**\n * Custom hook for handling tree node dragging.\n */\nexport default function useTreeDrag(props) {\n  var _useItemDataKeys = useItemDataKeys(),\n    childrenKey = _useItemDataKeys.childrenKey,\n    valueKey = _useItemDataKeys.valueKey,\n    labelKey = _useItemDataKeys.labelKey;\n  var draggable = props.draggable,\n    flattenedNodes = props.flattenedNodes,\n    treeNodesRefs = props.treeNodesRefs,\n    onDragStart = props.onDragStart,\n    onDragEnter = props.onDragEnter,\n    onDragOver = props.onDragOver,\n    onDragLeave = props.onDragLeave,\n    onDragEnd = props.onDragEnd,\n    onDrop = props.onDrop,\n    prefix = props.prefix;\n  // current dragging node\n  var dragNode = useRef(null);\n  var _useState = useState(null),\n    dragOverNodeKey = _useState[0],\n    setDragOverNodeKey = _useState[1];\n  // drag node and it's children nodes key\n  var _useState2 = useState([]),\n    dragNodeKeys = _useState2[0],\n    setDragNodeKeys = _useState2[1];\n  var _useState3 = useState(null),\n    dropNodePosition = _useState3[0],\n    setDropNodePosition = _useState3[1];\n  var setDragNode = useCallback(function (node) {\n    dragNode.current = node;\n  }, []);\n\n  /**\n   * Retrieves an array of keys for the nodes in a tree starting from the specified drag node.\n   */\n  var getDragNodeKeys = useCallback(function (dragNode) {\n    var dragNodeKeys = [dragNode[valueKey]];\n    var _traverse = function traverse(data) {\n      if ((data === null || data === void 0 ? void 0 : data.length) > 0) {\n        data.forEach(function (node) {\n          dragNodeKeys = dragNodeKeys.concat([node[valueKey]]);\n          if (node[childrenKey]) {\n            _traverse(node[childrenKey]);\n          }\n        });\n      }\n    };\n    _traverse(dragNode[childrenKey]);\n    return dragNodeKeys;\n  }, [childrenKey, valueKey]);\n\n  /**\n   * Removes the drag node from the data array.\n   *\n   */\n  var removeDragNode = useCallback(function (data, params) {\n    var dragNode = params.dragNode;\n    var _traverse2 = function traverse(items, parent) {\n      for (var index = 0; index < items.length; index += 1) {\n        var item = items[index];\n        if (equal(item[valueKey], dragNode[valueKey])) {\n          items.splice(index, 1);\n          // when children is empty, delete children prop for hidden anchor\n          if (items.length === 0 && parent) {\n            delete parent.children;\n          }\n          break;\n        }\n        if (Array.isArray(item[childrenKey])) {\n          _traverse2(item[childrenKey], item);\n        }\n      }\n    };\n    _traverse2(data);\n  }, [childrenKey, valueKey]);\n\n  /**\n   * Creates a function that modifies a tree data structure based on drag and drop parameters.\n   */\n  var createDragTreeDataFunction = useCallback(function (params) {\n    return function (tree) {\n      var data = [].concat(tree);\n      var dragNode = params.dragNode,\n        dropNode = params.dropNode,\n        dropNodePosition = params.dropNodePosition;\n      var cloneDragNode = _extends({}, dragNode);\n      removeDragNode(data, params);\n      var _updateTree = function updateTree(items) {\n        for (var index = 0; index < items.length; index += 1) {\n          var item = items[index];\n          if (equal(item[valueKey], dropNode[valueKey])) {\n            // drag to node inside\n            if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER) {\n              item[childrenKey] = isNil(item[childrenKey]) ? [] : item[childrenKey];\n              item[childrenKey].push(cloneDragNode);\n              break;\n            } else if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_TOP) {\n              // drag to top of node\n              items.splice(index, 0, cloneDragNode);\n              break;\n            } else if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM) {\n              // drag to bottom of node\n              items.splice(index + 1, 0, cloneDragNode);\n              break;\n            }\n          }\n          if (Array.isArray(item[childrenKey]) && item[childrenKey].length > 0) {\n            _updateTree(item[childrenKey]);\n          }\n        }\n      };\n      _updateTree(data);\n      return [].concat(data);\n    };\n  }, [childrenKey, removeDragNode, valueKey]);\n  var getDropData = useCallback(function (nodeData) {\n    var dragParams = {\n      dragNode: dragNode.current,\n      dropNode: nodeData,\n      dropNodePosition: dropNodePosition\n    };\n    return _extends({}, dragParams, {\n      createUpdateDataFunction: createDragTreeDataFunction(dragParams)\n    });\n  }, [createDragTreeDataFunction, dropNodePosition]);\n  var handleDragStart = useEventCallback(function (nodeData, event) {\n    if (draggable) {\n      var _event$dataTransfer;\n      var dragMoverNode = createDragPreview(stringifyReactNode(nodeData[labelKey]), prefix('drag-preview'));\n      (_event$dataTransfer = event.dataTransfer) === null || _event$dataTransfer === void 0 || _event$dataTransfer.setDragImage(dragMoverNode, 0, 0);\n      setDragNodeKeys(getDragNodeKeys(nodeData));\n      setDragNode(flattenedNodes[nodeData.refKey]);\n      onDragStart === null || onDragStart === void 0 || onDragStart(nodeData, event);\n    }\n  });\n  var handleDragEnter = useEventCallback(function (nodeData, event) {\n    if (dragNodeKeys.some(function (d) {\n      return equal(d, nodeData[valueKey]);\n    })) {\n      return;\n    }\n    if (dragNode.current) {\n      setDragOverNodeKey(nodeData[valueKey]);\n      setDropNodePosition(calDropNodePosition(event, treeNodesRefs[nodeData.refKey]));\n    }\n    onDragEnter === null || onDragEnter === void 0 || onDragEnter(nodeData, event);\n  });\n  var handleDragOver = useEventCallback(function (nodeData, event) {\n    if (dragNodeKeys.some(function (d) {\n      return equal(d, nodeData[valueKey]);\n    })) {\n      event.dataTransfer.dropEffect = 'none';\n      return;\n    }\n    if (dragNode.current && equal(nodeData[valueKey], dragOverNodeKey)) {\n      var lastDropNodePosition = calDropNodePosition(event, treeNodesRefs[nodeData.refKey]);\n      if (lastDropNodePosition === dropNodePosition) return;\n      setDropNodePosition(lastDropNodePosition);\n    }\n    onDragOver === null || onDragOver === void 0 || onDragOver(nodeData, event);\n  });\n  var handleDragLeave = useEventCallback(function (nodeData, event) {\n    onDragLeave === null || onDragLeave === void 0 || onDragLeave(nodeData, event);\n  });\n  var handleDragEnd = useEventCallback(function (nodeData, event) {\n    removeDragPreview();\n    setDragNode(null);\n    setDragNodeKeys([]);\n    setDragOverNodeKey(null);\n    onDragEnd === null || onDragEnd === void 0 || onDragEnd(nodeData, event);\n  });\n  var handleDrop = useEventCallback(function (nodeData, event) {\n    if (dragNodeKeys.some(function (d) {\n      return equal(d, nodeData[valueKey]);\n    })) {\n      console.error('Cannot drag a node to itself and its children');\n    } else {\n      var dropData = getDropData(nodeData);\n      onDrop === null || onDrop === void 0 || onDrop(dropData, event);\n    }\n    removeDragPreview();\n    setDragNode(null);\n    setDragNodeKeys([]);\n    setDragOverNodeKey(null);\n  });\n  var dragEvents = {\n    onDragStart: handleDragStart,\n    onDragEnter: handleDragEnter,\n    onDragOver: handleDragOver,\n    onDragLeave: handleDragLeave,\n    onDragEnd: handleDragEnd,\n    onDrop: handleDrop\n  };\n  return {\n    dragNode: dragNode === null || dragNode === void 0 ? void 0 : dragNode.current,\n    dragOverNodeKey: dragOverNodeKey,\n    dropNodePosition: dropNodePosition,\n    dragEvents: dragEvents\n  };\n}","map":{"version":3,"names":["_extends","useState","useRef","useCallback","isNil","TREE_NODE_DROP_POSITION","useEventCallback","shallowEqual","equal","stringifyReactNode","useItemDataKeys","TREE_NODE_GAP","calDropNodePosition","event","treeNodeElement","clientY","_treeNodeElement$getB","getBoundingClientRect","top","bottom","gap","DRAG_OVER_BOTTOM","DRAG_OVER_TOP","DRAG_OVER","createDragPreview","name","className","dragPreview","document","createElement","id","dataset","testid","innerHTML","classList","add","body","appendChild","removeDragPreview","_dragPreview$parentNo","_dragPreview$parentNo2","getElementById","parentNode","removeChild","call","useTreeDrag","props","_useItemDataKeys","childrenKey","valueKey","labelKey","draggable","flattenedNodes","treeNodesRefs","onDragStart","onDragEnter","onDragOver","onDragLeave","onDragEnd","onDrop","prefix","dragNode","_useState","dragOverNodeKey","setDragOverNodeKey","_useState2","dragNodeKeys","setDragNodeKeys","_useState3","dropNodePosition","setDropNodePosition","setDragNode","node","current","getDragNodeKeys","_traverse","traverse","data","length","forEach","concat","removeDragNode","params","_traverse2","items","parent","index","item","splice","children","Array","isArray","createDragTreeDataFunction","tree","dropNode","cloneDragNode","_updateTree","updateTree","push","getDropData","nodeData","dragParams","createUpdateDataFunction","handleDragStart","_event$dataTransfer","dragMoverNode","dataTransfer","setDragImage","refKey","handleDragEnter","some","d","handleDragOver","dropEffect","lastDropNodePosition","handleDragLeave","handleDragEnd","handleDrop","console","error","dropData","dragEvents"],"sources":["C:/Users/MVclouds/Desktop/QuickForm/Merged Mapping QF/QuickForm/QuickForm-Romit-Kajal-Merge/quick-form-app/node_modules/rsuite/esm/Tree/hooks/useTreeDrag.js"],"sourcesContent":["'use client';\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { useState, useRef, useCallback } from 'react';\nimport isNil from 'lodash/isNil';\nimport { TREE_NODE_DROP_POSITION } from \"../../internals/constants/index.js\";\nimport { useEventCallback } from \"../../internals/hooks/index.js\";\nimport { shallowEqual as equal, stringifyReactNode } from \"../../internals/utils/index.js\";\nimport { useItemDataKeys } from \"../../internals/Tree/TreeProvider.js\";\n/**\n * The gap between tree nodes.\n */\nvar TREE_NODE_GAP = 4;\n\n/**\n * Calculates the drop position of a tree node based on the clientY coordinate of a drag event\n * and the bounding rectangle of the tree node element.\n *\n * @param event - The drag event.\n * @param treeNodeElement - The element representing the tree node.\n * @returns The drop position of the tree node.\n */\nfunction calDropNodePosition(event, treeNodeElement) {\n  var clientY = event.clientY;\n  var _treeNodeElement$getB = treeNodeElement.getBoundingClientRect(),\n    top = _treeNodeElement$getB.top,\n    bottom = _treeNodeElement$getB.bottom;\n  var gap = TREE_NODE_GAP;\n\n  // bottom of node\n  if (clientY >= bottom - gap && clientY <= bottom) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM;\n  }\n\n  // top of node\n  if (clientY <= top + gap && clientY >= top) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER_TOP;\n  }\n  if (clientY >= top + gap && clientY <= bottom - gap) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER;\n  }\n  return -1;\n}\n\n/**\n * Creates a drag preview element for tree nodes.\n */\nfunction createDragPreview(name, className) {\n  var dragPreview = document.createElement('div');\n  dragPreview.id = 'rs-tree-drag-preview';\n  dragPreview.dataset.testid = 'drag-preview';\n  dragPreview.innerHTML = name;\n  dragPreview.classList.add(className);\n  document.body.appendChild(dragPreview);\n  return dragPreview;\n}\n\n/**\n * Removes the drag preview element from the DOM.\n */\nfunction removeDragPreview() {\n  var _dragPreview$parentNo, _dragPreview$parentNo2;\n  var dragPreview = document.getElementById('rs-tree-drag-preview');\n  dragPreview === null || dragPreview === void 0 || (_dragPreview$parentNo = dragPreview.parentNode) === null || _dragPreview$parentNo === void 0 || (_dragPreview$parentNo2 = _dragPreview$parentNo.removeChild) === null || _dragPreview$parentNo2 === void 0 || _dragPreview$parentNo2.call(_dragPreview$parentNo, dragPreview);\n}\n/**\n * Custom hook for handling tree node dragging.\n */\nexport default function useTreeDrag(props) {\n  var _useItemDataKeys = useItemDataKeys(),\n    childrenKey = _useItemDataKeys.childrenKey,\n    valueKey = _useItemDataKeys.valueKey,\n    labelKey = _useItemDataKeys.labelKey;\n  var draggable = props.draggable,\n    flattenedNodes = props.flattenedNodes,\n    treeNodesRefs = props.treeNodesRefs,\n    onDragStart = props.onDragStart,\n    onDragEnter = props.onDragEnter,\n    onDragOver = props.onDragOver,\n    onDragLeave = props.onDragLeave,\n    onDragEnd = props.onDragEnd,\n    onDrop = props.onDrop,\n    prefix = props.prefix;\n  // current dragging node\n  var dragNode = useRef(null);\n  var _useState = useState(null),\n    dragOverNodeKey = _useState[0],\n    setDragOverNodeKey = _useState[1];\n  // drag node and it's children nodes key\n  var _useState2 = useState([]),\n    dragNodeKeys = _useState2[0],\n    setDragNodeKeys = _useState2[1];\n  var _useState3 = useState(null),\n    dropNodePosition = _useState3[0],\n    setDropNodePosition = _useState3[1];\n  var setDragNode = useCallback(function (node) {\n    dragNode.current = node;\n  }, []);\n\n  /**\n   * Retrieves an array of keys for the nodes in a tree starting from the specified drag node.\n   */\n  var getDragNodeKeys = useCallback(function (dragNode) {\n    var dragNodeKeys = [dragNode[valueKey]];\n    var _traverse = function traverse(data) {\n      if ((data === null || data === void 0 ? void 0 : data.length) > 0) {\n        data.forEach(function (node) {\n          dragNodeKeys = dragNodeKeys.concat([node[valueKey]]);\n          if (node[childrenKey]) {\n            _traverse(node[childrenKey]);\n          }\n        });\n      }\n    };\n    _traverse(dragNode[childrenKey]);\n    return dragNodeKeys;\n  }, [childrenKey, valueKey]);\n\n  /**\n   * Removes the drag node from the data array.\n   *\n   */\n  var removeDragNode = useCallback(function (data, params) {\n    var dragNode = params.dragNode;\n    var _traverse2 = function traverse(items, parent) {\n      for (var index = 0; index < items.length; index += 1) {\n        var item = items[index];\n        if (equal(item[valueKey], dragNode[valueKey])) {\n          items.splice(index, 1);\n          // when children is empty, delete children prop for hidden anchor\n          if (items.length === 0 && parent) {\n            delete parent.children;\n          }\n          break;\n        }\n        if (Array.isArray(item[childrenKey])) {\n          _traverse2(item[childrenKey], item);\n        }\n      }\n    };\n    _traverse2(data);\n  }, [childrenKey, valueKey]);\n\n  /**\n   * Creates a function that modifies a tree data structure based on drag and drop parameters.\n   */\n  var createDragTreeDataFunction = useCallback(function (params) {\n    return function (tree) {\n      var data = [].concat(tree);\n      var dragNode = params.dragNode,\n        dropNode = params.dropNode,\n        dropNodePosition = params.dropNodePosition;\n      var cloneDragNode = _extends({}, dragNode);\n      removeDragNode(data, params);\n      var _updateTree = function updateTree(items) {\n        for (var index = 0; index < items.length; index += 1) {\n          var item = items[index];\n          if (equal(item[valueKey], dropNode[valueKey])) {\n            // drag to node inside\n            if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER) {\n              item[childrenKey] = isNil(item[childrenKey]) ? [] : item[childrenKey];\n              item[childrenKey].push(cloneDragNode);\n              break;\n            } else if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_TOP) {\n              // drag to top of node\n              items.splice(index, 0, cloneDragNode);\n              break;\n            } else if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM) {\n              // drag to bottom of node\n              items.splice(index + 1, 0, cloneDragNode);\n              break;\n            }\n          }\n          if (Array.isArray(item[childrenKey]) && item[childrenKey].length > 0) {\n            _updateTree(item[childrenKey]);\n          }\n        }\n      };\n      _updateTree(data);\n      return [].concat(data);\n    };\n  }, [childrenKey, removeDragNode, valueKey]);\n  var getDropData = useCallback(function (nodeData) {\n    var dragParams = {\n      dragNode: dragNode.current,\n      dropNode: nodeData,\n      dropNodePosition: dropNodePosition\n    };\n    return _extends({}, dragParams, {\n      createUpdateDataFunction: createDragTreeDataFunction(dragParams)\n    });\n  }, [createDragTreeDataFunction, dropNodePosition]);\n  var handleDragStart = useEventCallback(function (nodeData, event) {\n    if (draggable) {\n      var _event$dataTransfer;\n      var dragMoverNode = createDragPreview(stringifyReactNode(nodeData[labelKey]), prefix('drag-preview'));\n      (_event$dataTransfer = event.dataTransfer) === null || _event$dataTransfer === void 0 || _event$dataTransfer.setDragImage(dragMoverNode, 0, 0);\n      setDragNodeKeys(getDragNodeKeys(nodeData));\n      setDragNode(flattenedNodes[nodeData.refKey]);\n      onDragStart === null || onDragStart === void 0 || onDragStart(nodeData, event);\n    }\n  });\n  var handleDragEnter = useEventCallback(function (nodeData, event) {\n    if (dragNodeKeys.some(function (d) {\n      return equal(d, nodeData[valueKey]);\n    })) {\n      return;\n    }\n    if (dragNode.current) {\n      setDragOverNodeKey(nodeData[valueKey]);\n      setDropNodePosition(calDropNodePosition(event, treeNodesRefs[nodeData.refKey]));\n    }\n    onDragEnter === null || onDragEnter === void 0 || onDragEnter(nodeData, event);\n  });\n  var handleDragOver = useEventCallback(function (nodeData, event) {\n    if (dragNodeKeys.some(function (d) {\n      return equal(d, nodeData[valueKey]);\n    })) {\n      event.dataTransfer.dropEffect = 'none';\n      return;\n    }\n    if (dragNode.current && equal(nodeData[valueKey], dragOverNodeKey)) {\n      var lastDropNodePosition = calDropNodePosition(event, treeNodesRefs[nodeData.refKey]);\n      if (lastDropNodePosition === dropNodePosition) return;\n      setDropNodePosition(lastDropNodePosition);\n    }\n    onDragOver === null || onDragOver === void 0 || onDragOver(nodeData, event);\n  });\n  var handleDragLeave = useEventCallback(function (nodeData, event) {\n    onDragLeave === null || onDragLeave === void 0 || onDragLeave(nodeData, event);\n  });\n  var handleDragEnd = useEventCallback(function (nodeData, event) {\n    removeDragPreview();\n    setDragNode(null);\n    setDragNodeKeys([]);\n    setDragOverNodeKey(null);\n    onDragEnd === null || onDragEnd === void 0 || onDragEnd(nodeData, event);\n  });\n  var handleDrop = useEventCallback(function (nodeData, event) {\n    if (dragNodeKeys.some(function (d) {\n      return equal(d, nodeData[valueKey]);\n    })) {\n      console.error('Cannot drag a node to itself and its children');\n    } else {\n      var dropData = getDropData(nodeData);\n      onDrop === null || onDrop === void 0 || onDrop(dropData, event);\n    }\n    removeDragPreview();\n    setDragNode(null);\n    setDragNodeKeys([]);\n    setDragOverNodeKey(null);\n  });\n  var dragEvents = {\n    onDragStart: handleDragStart,\n    onDragEnter: handleDragEnter,\n    onDragOver: handleDragOver,\n    onDragLeave: handleDragLeave,\n    onDragEnd: handleDragEnd,\n    onDrop: handleDrop\n  };\n  return {\n    dragNode: dragNode === null || dragNode === void 0 ? void 0 : dragNode.current,\n    dragOverNodeKey: dragOverNodeKey,\n    dropNodePosition: dropNodePosition,\n    dragEvents: dragEvents\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"'use client';\n\nfunction _createForOfIteratorHelperLoose(r, e) {\n  var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (t) return (t = t.call(r)).next.bind(t);\n  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) {\n    t && (r = t);\n    var o = 0;\n    return function () {\n      return o >= r.length ? {\n        done: !0\n      } : {\n        done: !1,\n        value: r[o++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nimport { attachParent } from \"../../internals/utils/index.js\";\n\n/**\n * Strategy for walking the tree.\n */\nexport var WalkTreeStrategy = /*#__PURE__*/function (WalkTreeStrategy) {\n  WalkTreeStrategy[WalkTreeStrategy[\"DFS\"] = 0] = \"DFS\";\n  WalkTreeStrategy[WalkTreeStrategy[\"BFS\"] = 1] = \"BFS\";\n  return WalkTreeStrategy;\n}({});\n\n/**\n * Flattens a tree structure into an array.\n */\nexport function flattenTree(rootNodes, getChildren, walkStrategy) {\n  if (walkStrategy === void 0) {\n    walkStrategy = WalkTreeStrategy.BFS;\n  }\n  var result = [];\n  if (walkStrategy === WalkTreeStrategy.BFS) {\n    walkTreeBfs(rootNodes, getChildren, function (node) {\n      return result.push(node);\n    });\n  } else if (walkStrategy === WalkTreeStrategy.DFS) {\n    walkTreeDfs(rootNodes, getChildren, function (node) {\n      return result.push(node);\n    });\n  }\n  return result;\n}\n\n/**\n * Walks the tree in a breadth-first search (BFS) manner.\n */\nexport function walkTreeBfs(rootNodes, getChildren, callback) {\n  for (var queue = [].concat(rootNodes); queue.length > 0;) {\n    var node = queue.shift();\n    callback(node);\n    var children = getChildren(node);\n    if (children) {\n      queue.push.apply(queue, children);\n    }\n  }\n}\n\n/**\n * Walks the tree in a depth-first search (DFS) manner.\n */\nexport function walkTreeDfs(rootNodes, getChildren, callback) {\n  for (var _iterator = _createForOfIteratorHelperLoose(rootNodes), _step; !(_step = _iterator()).done;) {\n    var node = _step.value;\n    callback(node);\n    var children = getChildren(node);\n    if (children) {\n      walkTreeDfs(children, getChildren, callback);\n    }\n  }\n}\n\n/**\n * Flattens a tree structure to an array (deprecated).\n * @deprecated This function is considered unsafe because it mutates the `tree` argument in-place.\n *             Use the `flattenTree` function instead.\n */\nexport function UNSAFE_flattenTree(tree, childrenKey, executor) {\n  if (childrenKey === void 0) {\n    childrenKey = 'children';\n  }\n  var flattenData = [];\n  var _traverse = function traverse(data, parent) {\n    if (!Array.isArray(data)) {\n      return;\n    }\n    data.forEach(function (item, index) {\n      var node = typeof executor === 'function' ? executor(item, index) : item;\n      flattenData.push(attachParent(node, parent));\n      if (item[childrenKey]) {\n        _traverse(item[childrenKey], item);\n      }\n    });\n  };\n  _traverse(tree, null);\n  return flattenData;\n}","map":{"version":3,"names":["_createForOfIteratorHelperLoose","r","e","t","Symbol","iterator","call","next","bind","Array","isArray","_unsupportedIterableToArray","length","o","done","value","TypeError","a","_arrayLikeToArray","toString","slice","constructor","name","from","test","n","attachParent","WalkTreeStrategy","flattenTree","rootNodes","getChildren","walkStrategy","BFS","result","walkTreeBfs","node","push","DFS","walkTreeDfs","callback","queue","concat","shift","children","apply","_iterator","_step","UNSAFE_flattenTree","tree","childrenKey","executor","flattenData","_traverse","traverse","data","parent","forEach","item","index"],"sources":["C:/Users/MVclouds/Desktop/QuickForm/Merged Mapping QF/QuickForm/QuickForm-Romit-Kajal-Merge/quick-form-app/node_modules/rsuite/esm/Tree/utils/flattenTree.js"],"sourcesContent":["'use client';\nfunction _createForOfIteratorHelperLoose(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (t) return (t = t.call(r)).next.bind(t); if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var o = 0; return function () { return o >= r.length ? { done: !0 } : { done: !1, value: r[o++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nimport { attachParent } from \"../../internals/utils/index.js\";\n\n/**\n * Strategy for walking the tree.\n */\nexport var WalkTreeStrategy = /*#__PURE__*/function (WalkTreeStrategy) {\n  WalkTreeStrategy[WalkTreeStrategy[\"DFS\"] = 0] = \"DFS\";\n  WalkTreeStrategy[WalkTreeStrategy[\"BFS\"] = 1] = \"BFS\";\n  return WalkTreeStrategy;\n}({});\n\n/**\n * Flattens a tree structure into an array.\n */\nexport function flattenTree(rootNodes, getChildren, walkStrategy) {\n  if (walkStrategy === void 0) {\n    walkStrategy = WalkTreeStrategy.BFS;\n  }\n  var result = [];\n  if (walkStrategy === WalkTreeStrategy.BFS) {\n    walkTreeBfs(rootNodes, getChildren, function (node) {\n      return result.push(node);\n    });\n  } else if (walkStrategy === WalkTreeStrategy.DFS) {\n    walkTreeDfs(rootNodes, getChildren, function (node) {\n      return result.push(node);\n    });\n  }\n  return result;\n}\n\n/**\n * Walks the tree in a breadth-first search (BFS) manner.\n */\nexport function walkTreeBfs(rootNodes, getChildren, callback) {\n  for (var queue = [].concat(rootNodes); queue.length > 0;) {\n    var node = queue.shift();\n    callback(node);\n    var children = getChildren(node);\n    if (children) {\n      queue.push.apply(queue, children);\n    }\n  }\n}\n\n/**\n * Walks the tree in a depth-first search (DFS) manner.\n */\nexport function walkTreeDfs(rootNodes, getChildren, callback) {\n  for (var _iterator = _createForOfIteratorHelperLoose(rootNodes), _step; !(_step = _iterator()).done;) {\n    var node = _step.value;\n    callback(node);\n    var children = getChildren(node);\n    if (children) {\n      walkTreeDfs(children, getChildren, callback);\n    }\n  }\n}\n\n/**\n * Flattens a tree structure to an array (deprecated).\n * @deprecated This function is considered unsafe because it mutates the `tree` argument in-place.\n *             Use the `flattenTree` function instead.\n */\nexport function UNSAFE_flattenTree(tree, childrenKey, executor) {\n  if (childrenKey === void 0) {\n    childrenKey = 'children';\n  }\n  var flattenData = [];\n  var _traverse = function traverse(data, parent) {\n    if (!Array.isArray(data)) {\n      return;\n    }\n    data.forEach(function (item, index) {\n      var node = typeof executor === 'function' ? executor(item, index) : item;\n      flattenData.push(attachParent(node, parent));\n      if (item[childrenKey]) {\n        _traverse(item[childrenKey], item);\n      }\n    });\n  };\n  _traverse(tree, null);\n  return flattenData;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
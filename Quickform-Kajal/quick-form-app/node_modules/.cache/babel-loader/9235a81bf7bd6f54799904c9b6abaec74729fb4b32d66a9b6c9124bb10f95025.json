{"ast":null,"code":"'use client';\n\nimport React from 'react';\n\n/**\n * Converts a React element to a string representation.\n * @param element - The React element to convert.\n * @returns An array of strings representing the React element.\n */\nexport function reactToString(element) {\n  var nodes = [];\n  var _recursion = function recursion(elmt) {\n    React.Children.forEach(elmt.props.children, function (child) {\n      if (/*#__PURE__*/React.isValidElement(child)) {\n        _recursion(child);\n      } else if (typeof child === 'string') {\n        nodes.push(child);\n      }\n    });\n  };\n  _recursion(element);\n  return nodes;\n}\n\n/**\n * Converts a React node to a string representation.\n * @param node - The React node to convert.\n * @returns A string representation of the React node.\n */\nexport function stringifyReactNode(node) {\n  if (typeof node === 'string') {\n    return node;\n  } else if (/*#__PURE__*/React.isValidElement(node)) {\n    var nodes = reactToString(node);\n    return nodes.join('');\n  }\n  return '';\n}\nexport default stringifyReactNode;","map":{"version":3,"names":["React","reactToString","element","nodes","_recursion","recursion","elmt","Children","forEach","props","children","child","isValidElement","push","stringifyReactNode","node","join"],"sources":["C:/Users/MVclouds/Desktop/QuickForm/Merged Mapping QF/QuickForm/QuickForm-Romit-Kajal-Merge/quick-form-app/node_modules/rsuite/esm/internals/utils/stringifyReactNode.js"],"sourcesContent":["'use client';\nimport React from 'react';\n\n/**\n * Converts a React element to a string representation.\n * @param element - The React element to convert.\n * @returns An array of strings representing the React element.\n */\nexport function reactToString(element) {\n  var nodes = [];\n  var _recursion = function recursion(elmt) {\n    React.Children.forEach(elmt.props.children, function (child) {\n      if (/*#__PURE__*/React.isValidElement(child)) {\n        _recursion(child);\n      } else if (typeof child === 'string') {\n        nodes.push(child);\n      }\n    });\n  };\n  _recursion(element);\n  return nodes;\n}\n\n/**\n * Converts a React node to a string representation.\n * @param node - The React node to convert.\n * @returns A string representation of the React node.\n */\nexport function stringifyReactNode(node) {\n  if (typeof node === 'string') {\n    return node;\n  } else if (/*#__PURE__*/React.isValidElement(node)) {\n    var nodes = reactToString(node);\n    return nodes.join('');\n  }\n  return '';\n}\nexport default stringifyReactNode;"],"mappings":"AAAA,YAAY;;AACZ,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,OAAO,EAAE;EACrC,IAAIC,KAAK,GAAG,EAAE;EACd,IAAIC,UAAU,GAAG,SAASC,SAASA,CAACC,IAAI,EAAE;IACxCN,KAAK,CAACO,QAAQ,CAACC,OAAO,CAACF,IAAI,CAACG,KAAK,CAACC,QAAQ,EAAE,UAAUC,KAAK,EAAE;MAC3D,IAAI,aAAaX,KAAK,CAACY,cAAc,CAACD,KAAK,CAAC,EAAE;QAC5CP,UAAU,CAACO,KAAK,CAAC;MACnB,CAAC,MAAM,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QACpCR,KAAK,CAACU,IAAI,CAACF,KAAK,CAAC;MACnB;IACF,CAAC,CAAC;EACJ,CAAC;EACDP,UAAU,CAACF,OAAO,CAAC;EACnB,OAAOC,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASW,kBAAkBA,CAACC,IAAI,EAAE;EACvC,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC5B,OAAOA,IAAI;EACb,CAAC,MAAM,IAAI,aAAaf,KAAK,CAACY,cAAc,CAACG,IAAI,CAAC,EAAE;IAClD,IAAIZ,KAAK,GAAGF,aAAa,CAACc,IAAI,CAAC;IAC/B,OAAOZ,KAAK,CAACa,IAAI,CAAC,EAAE,CAAC;EACvB;EACA,OAAO,EAAE;AACX;AACA,eAAeF,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { MixedType, arrayTypeSchemaSpec } from './MixedType';\nexport class ArrayType extends MixedType {\n  constructor(errorMessage) {\n    super('array');\n    this.isArrayTypeNested = false;\n    super.pushRule({\n      onValid: v => {\n        // Skip array type check for nested array elements\n        if (this.isArrayTypeNested) {\n          return true;\n        }\n        return Array.isArray(v);\n      },\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n  rangeLength(minLength, maxLength) {\n    let errorMessage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.locale.rangeLength;\n    super.pushRule({\n      onValid: value => value.length >= minLength && value.length <= maxLength,\n      errorMessage,\n      params: {\n        minLength,\n        maxLength\n      }\n    });\n    return this;\n  }\n  minLength(minLength) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.minLength;\n    super.pushRule({\n      onValid: value => value.length >= minLength,\n      errorMessage,\n      params: {\n        minLength\n      }\n    });\n    return this;\n  }\n  maxLength(maxLength) {\n    let errorMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale.maxLength;\n    super.pushRule({\n      onValid: value => value.length <= maxLength,\n      errorMessage,\n      params: {\n        maxLength\n      }\n    });\n    return this;\n  }\n  unrepeatable() {\n    let errorMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.locale.unrepeatable;\n    super.pushRule({\n      onValid: items => {\n        const hash = {};\n        for (const i in items) {\n          if (hash[items[i]]) {\n            return false;\n          }\n          hash[items[i]] = true;\n        }\n        return true;\n      },\n      errorMessage\n    });\n    return this;\n  }\n  of() {\n    for (var _len = arguments.length, types = new Array(_len), _key = 0; _key < _len; _key++) {\n      types[_key] = arguments[_key];\n    }\n    if (types.length === 1) {\n      const type = types[0];\n      this[arrayTypeSchemaSpec] = type;\n      // Mark inner ArrayType as nested when dealing with nested arrays\n      if (type instanceof ArrayType) {\n        type.isArrayTypeNested = true;\n      }\n      super.pushRule({\n        onValid: (items, data, fieldName) => {\n          // For non-array values in nested arrays, pass directly to inner type validation\n          if (!Array.isArray(items) && this.isArrayTypeNested) {\n            return type.check(items, data, fieldName);\n          }\n          // For non-array values in non-nested arrays, return array type error\n          if (!Array.isArray(items)) {\n            return {\n              hasError: true,\n              errorMessage: this.locale.type\n            };\n          }\n          const checkResults = items.map((value, index) => {\n            const name = Array.isArray(fieldName) ? [...fieldName, \"[\".concat(index, \"]\")] : [fieldName, \"[\".concat(index, \"]\")];\n            return type.check(value, data, name);\n          });\n          const hasError = !!checkResults.find(item => item === null || item === void 0 ? void 0 : item.hasError);\n          return {\n            hasError,\n            array: checkResults\n          };\n        }\n      });\n    } else {\n      this[arrayTypeSchemaSpec] = types;\n      super.pushRule({\n        onValid: (items, data, fieldName) => {\n          const checkResults = items.map((value, index) => {\n            const name = Array.isArray(fieldName) ? [...fieldName, \"[\".concat(index, \"]\")] : [fieldName, \"[\".concat(index, \"]\")];\n            return types[index].check(value, data, name);\n          });\n          const hasError = !!checkResults.find(item => item === null || item === void 0 ? void 0 : item.hasError);\n          return {\n            hasError,\n            array: checkResults\n          };\n        }\n      });\n    }\n    return this;\n  }\n}\nexport default function getArrayType(errorMessage) {\n  return new ArrayType(errorMessage);\n}","map":{"version":3,"names":["MixedType","arrayTypeSchemaSpec","ArrayType","constructor","errorMessage","isArrayTypeNested","pushRule","onValid","v","Array","isArray","locale","type","rangeLength","minLength","maxLength","arguments","length","undefined","value","params","unrepeatable","items","hash","i","of","_len","types","_key","data","fieldName","check","hasError","checkResults","map","index","name","concat","find","item","array","getArrayType"],"sources":["C:\\Users\\MVclouds\\Desktop\\QuickForm\\Merged Mapping QF\\QuickForm\\QuickForm-Romit-Kajal-Merge\\quick-form-app\\node_modules\\schema-typed\\src\\ArrayType.ts"],"sourcesContent":["import { MixedType, arrayTypeSchemaSpec } from './MixedType';\nimport { PlainObject, CheckResult, ErrorMessageType } from './types';\nimport { ArrayTypeLocale } from './locales';\n\nexport class ArrayType<DataType = any, E = ErrorMessageType> extends MixedType<\n  any[],\n  DataType,\n  E,\n  ArrayTypeLocale\n> {\n  [arrayTypeSchemaSpec]: MixedType<any, DataType, E> | MixedType<any, DataType, E>[];\n  private isArrayTypeNested = false;\n\n  constructor(errorMessage?: E | string) {\n    super('array');\n    super.pushRule({\n      onValid: v => {\n        // Skip array type check for nested array elements\n        if (this.isArrayTypeNested) {\n          return true;\n        }\n        return Array.isArray(v);\n      },\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n\n  rangeLength(\n    minLength: number,\n    maxLength: number,\n    errorMessage: E | string = this.locale.rangeLength\n  ) {\n    super.pushRule({\n      onValid: (value: string[]) => value.length >= minLength && value.length <= maxLength,\n      errorMessage,\n      params: { minLength, maxLength }\n    });\n    return this;\n  }\n\n  minLength(minLength: number, errorMessage: E | string = this.locale.minLength) {\n    super.pushRule({\n      onValid: value => value.length >= minLength,\n      errorMessage,\n      params: { minLength }\n    });\n\n    return this;\n  }\n\n  maxLength(maxLength: number, errorMessage: E | string = this.locale.maxLength) {\n    super.pushRule({\n      onValid: value => value.length <= maxLength,\n      errorMessage,\n      params: { maxLength }\n    });\n    return this;\n  }\n\n  unrepeatable(errorMessage: E | string = this.locale.unrepeatable) {\n    super.pushRule({\n      onValid: items => {\n        const hash: PlainObject = {};\n        for (const i in items) {\n          if (hash[items[i]]) {\n            return false;\n          }\n          hash[items[i]] = true;\n        }\n        return true;\n      },\n      errorMessage\n    });\n\n    return this;\n  }\n\n  of(...types: MixedType<any, DataType, E>[]) {\n    if (types.length === 1) {\n      const type = types[0];\n      this[arrayTypeSchemaSpec] = type;\n\n      // Mark inner ArrayType as nested when dealing with nested arrays\n      if (type instanceof ArrayType) {\n        type.isArrayTypeNested = true;\n      }\n\n      super.pushRule({\n        onValid: (items, data, fieldName) => {\n          // For non-array values in nested arrays, pass directly to inner type validation\n          if (!Array.isArray(items) && this.isArrayTypeNested) {\n            return type.check(items, data, fieldName);\n          }\n\n          // For non-array values in non-nested arrays, return array type error\n          if (!Array.isArray(items)) {\n            return {\n              hasError: true,\n              errorMessage: this.locale.type\n            };\n          }\n\n          const checkResults = items.map((value, index) => {\n            const name = Array.isArray(fieldName)\n              ? [...fieldName, `[${index}]`]\n              : [fieldName, `[${index}]`];\n\n            return type.check(value, data, name as string[]);\n          });\n          const hasError = !!checkResults.find(item => item?.hasError);\n\n          return {\n            hasError,\n            array: checkResults\n          } as CheckResult<string | E>;\n        }\n      });\n    } else {\n      this[arrayTypeSchemaSpec] = types;\n      super.pushRule({\n        onValid: (items, data, fieldName) => {\n          const checkResults = items.map((value, index) => {\n            const name = Array.isArray(fieldName)\n              ? [...fieldName, `[${index}]`]\n              : [fieldName, `[${index}]`];\n\n            return types[index].check(value, data, name as string[]);\n          });\n          const hasError = !!checkResults.find(item => item?.hasError);\n\n          return {\n            hasError,\n            array: checkResults\n          } as CheckResult<string | E>;\n        }\n      });\n    }\n\n    return this;\n  }\n}\n\nexport default function getArrayType<DataType = any, E = string>(errorMessage?: E) {\n  return new ArrayType<DataType, E>(errorMessage);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
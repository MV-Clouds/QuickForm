{"ast":null,"code":"import _objectSpread from\"C:/Users/MVclouds/Desktop/QuickForm/Merged Mapping QF/QuickForm/QuickForm-Romit-Kajal-Merge/quick-form-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useCallback,useMemo,useRef,useEffect,useState}from\"react\";import ReactFlow,{useNodesState,useEdgesState,addEdge,Controls,Background,Handle}from\"reactflow\";import{motion,AnimatePresence}from\"framer-motion\";import\"reactflow/dist/style.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const CustomNode=_ref=>{let{data,selected,id}=_ref;const[isHovered,setIsHovered]=useState(false);const getNodeStyles=()=>{const baseStyles=\"relative backdrop-blur-sm border-2 rounded-2xl shadow-lg transition-all duration-300 hover:shadow-xl\";switch(data.type){case\"condition\":return\"\".concat(baseStyles,\" bg-gradient-to-br from-indigo-50 to-indigo-100 border-indigo-300 hover:border-indigo-400\");case\"loop\":return\"\".concat(baseStyles,\" bg-gradient-to-br from-violet-50 to-violet-100 border-violet-300 hover:border-violet-400\");case\"formatter\":return\"\".concat(baseStyles,\" bg-gradient-to-br from-teal-50 to-teal-100 border-teal-300 hover:border-teal-400\");case\"action\":return\"\".concat(baseStyles,\" bg-gradient-to-br from-rose-50 to-rose-100 border-rose-300 hover:border-rose-400\");case\"utility\":return\"\".concat(baseStyles,\" bg-gradient-to-br from-amber-50 to-amber-100 border-amber-300 hover:border-amber-400\");default:return\"\".concat(baseStyles,\" bg-gradient-to-br from-gray-50 to-gray-100 border-gray-300 hover:border-gray-400\");}};const getIconColor=()=>{switch(data.type){case\"condition\":return\"text-indigo-600\";case\"loop\":return\"text-violet-600\";case\"formatter\":return\"text-teal-600\";case\"action\":return\"text-rose-600\";case\"utility\":return\"text-amber-600\";default:return\"text-gray-600\";}};const getIcon=()=>{switch(data.type){case\"condition\":return\"ðŸ”€\";case\"loop\":return\"ðŸ”„\";case\"formatter\":return\"ðŸŽ¨\";case\"action\":return\"âš¡\";case\"utility\":return\"ðŸ”§\";default:return\"ðŸ“‹\";}};// Don't show icons for start and end nodes\nconst shouldShowIcon=id!==\"start\"&&id!==\"end\";return/*#__PURE__*/_jsxs(motion.div,{initial:{scale:0.8,opacity:0},animate:{scale:1,opacity:1},whileHover:{scale:1.02},transition:{duration:0.2},draggable:data.draggable!==false,className:\"\".concat(getNodeStyles(),\" \").concat(data.draggable===false?\"cursor-default\":\"cursor-grab\",\" pointer-events-auto min-w-[120px] p-4 group\"),onMouseEnter:()=>setIsHovered(true),onMouseLeave:()=>setIsHovered(false),children:[/*#__PURE__*/_jsx(Handle,{type:\"target\",position:\"top\",id:\"top\",className:\"w-4 h-4 bg-gradient-to-r from-slate-400 to-slate-500 -top-2 left-1/2 transform -translate-x-1/2 border-2 border-white rounded-full shadow-md pointer-events-auto transition-all duration-200 hover:scale-110\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-center items-center space-x-3\",children:[shouldShowIcon&&/*#__PURE__*/_jsx(\"span\",{className:\"text-lg \".concat(getIconColor()),children:getIcon()}),/*#__PURE__*/_jsx(\"div\",{className:\"font-semibold text-slate-700 text-sm leading-tight\",children:data.displayLabel})]}),/*#__PURE__*/_jsx(AnimatePresence,{children:isHovered&&/*#__PURE__*/_jsx(motion.div,{initial:{opacity:0,scale:0.8},animate:{opacity:1,scale:1},exit:{opacity:0,scale:0.8},className:\"absolute inset-0 bg-gradient-to-br from-white/20 to-transparent rounded-2xl pointer-events-none\"})}),/*#__PURE__*/_jsx(Handle,{type:\"source\",position:\"bottom\",id:\"bottom\",className:\"w-4 h-4 bg-gradient-to-r from-slate-400 to-slate-500 -bottom-2 left-1/2 transform -translate-x-1/2 border-2 border-white rounded-full shadow-md pointer-events-auto transition-all duration-200 hover:scale-110\"})]});};const CustomEdge=_ref2=>{let{id,sourceX,sourceY,targetX,targetY,style={},onEdgeDelete}=_ref2;const[isHovered,setIsHovered]=useState(false);const path=\"M\".concat(sourceX,\",\").concat(sourceY,\" L\").concat(targetX,\",\").concat(targetY);const midX=(sourceX+targetX)/2;const midY=(sourceY+targetY)/2;return/*#__PURE__*/_jsxs(\"g\",{onMouseEnter:()=>setIsHovered(true),onMouseLeave:()=>setIsHovered(false),className:\"pointer-events-auto\",children:[/*#__PURE__*/_jsx(\"defs\",{children:/*#__PURE__*/_jsxs(\"filter\",{id:\"glow-\".concat(id),children:[/*#__PURE__*/_jsx(\"feGaussianBlur\",{stdDeviation:\"2\",result:\"coloredBlur\"}),/*#__PURE__*/_jsxs(\"feMerge\",{children:[/*#__PURE__*/_jsx(\"feMergeNode\",{in:\"coloredBlur\"}),/*#__PURE__*/_jsx(\"feMergeNode\",{in:\"SourceGraphic\"})]})]})}),/*#__PURE__*/_jsx(\"path\",{id:id,style:style,className:\"react-flow__edge-path fill-none stroke-3 transition-all duration-300 \".concat(isHovered?'filter drop-shadow-lg':''),stroke:\"#64748b\",strokeWidth:isHovered?\"4\":\"2\",d:path,filter:isHovered?\"url(#glow-\".concat(id,\")\"):undefined}),/*#__PURE__*/_jsx(AnimatePresence,{children:isHovered&&/*#__PURE__*/_jsxs(motion.g,{initial:{scale:0,opacity:0},animate:{scale:1,opacity:1},exit:{scale:0,opacity:0},className:\"cursor-pointer\",onClick:()=>onEdgeDelete(id),children:[/*#__PURE__*/_jsx(\"circle\",{cx:midX,cy:midY,r:\"16\",className:\"fill-red-500 stroke-white stroke-2 filter drop-shadow-lg\"}),/*#__PURE__*/_jsx(\"text\",{x:midX,y:midY+5,className:\"fill-white text-center text-sm font-bold\",textAnchor:\"middle\",children:\"\\xD7\"})]})})]});};const FlowDesigner=_ref3=>{let{initialNodes,initialEdges,setSelectedNode,setNodes:setParentNodes,setEdges:setParentEdges}=_ref3;const reactFlowWrapper=useRef(null);const[nodes,setNodes,onNodesChange]=useNodesState(initialNodes);const[edges,setEdges,onEdgesChange]=useEdgesState(initialEdges);const orderCounterRef=useRef(1);const lastConnectTimeRef=useRef(0);useEffect(()=>{setParentNodes(nodes);setParentEdges(edges);},[nodes,edges,setParentNodes,setParentEdges]);// Add delete node function to window for access from CustomNode\nuseEffect(()=>{window.deleteNode=nodeId=>{setNodes(nds=>nds.filter(n=>n.id!==nodeId));setEdges(eds=>eds.filter(e=>e.source!==nodeId&&e.target!==nodeId));};return()=>{delete window.deleteNode;};},[setNodes,setEdges]);const nodesWithDraggable=nodes.map(node=>_objectSpread(_objectSpread({},node),{},{draggable:node.draggable!==false}));const handleNodesChange=useCallback(changes=>{const filteredChanges=changes.filter(change=>{if(change.type===\"position\"&&change.dragging){const node=nodes.find(n=>n.id===change.id);if(node&&node.draggable===false)return false;}return true;});onNodesChange(filteredChanges);},[nodes,onNodesChange]);const calculateNodeOrders=useCallback((currentNodes,currentEdges)=>{const updatedNodes=[...currentNodes];const visited=new Set();const nodeOrders=new Map();const nodeLevels=new Map();orderCounterRef.current=1;const levelNodeCounts={};// First pass: Calculate levels for all nodes\nconst calculateLevels=function(nodeId){let level=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;if(!nodeId||visited.has(nodeId))return;visited.add(nodeId);// Set level for current node (use maximum level if already set)\nconst currentLevel=nodeLevels.get(nodeId)||0;nodeLevels.set(nodeId,Math.max(currentLevel,level));// Process outgoing edges\nconst outgoingEdges=currentEdges.filter(edge=>edge.source===nodeId);for(const edge of outgoingEdges){if(edge.target===\"end\"){// Don't process End node yet, just mark its minimum level\nconst endCurrentLevel=nodeLevels.get(\"end\")||0;nodeLevels.set(\"end\",Math.max(endCurrentLevel,level+1));}else{calculateLevels(edge.target,level+1);}}};// Start level calculation from start node\nconst startNode=currentNodes.find(node=>node.id===\"start\");if(startNode){visited.clear();calculateLevels(startNode.id);}// Second pass: Assign orders based on levels\nvisited.clear();const assignOrders=function(nodeId){let targetLevel=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;if(!nodeId||visited.has(nodeId))return;const nodeIndex=updatedNodes.findIndex(n=>n.id===nodeId);if(nodeIndex===-1)return;const node=updatedNodes[nodeIndex];const level=targetLevel!==null?targetLevel:nodeLevels.get(nodeId)||1;visited.add(nodeId);// Assign order if not already assigned\nlet order;if(nodeOrders.has(nodeId)){order=nodeOrders.get(nodeId);}else{order=orderCounterRef.current++;nodeOrders.set(nodeId,order);}// Track node counts at each level for labeling\nif(!levelNodeCounts[level])levelNodeCounts[level]={};const actionKey=node.data.action||(node.id===\"start\"?\"Start\":node.id===\"end\"?\"End\":\"Condition\");levelNodeCounts[level][actionKey]=(levelNodeCounts[level][actionKey]||0)+1;const index=levelNodeCounts[level][actionKey];// Generate labels\nlet label=node.id===\"start\"?\"Start\":node.id===\"end\"?\"End\":node.data.action===\"Condition\"?\"Cond_\".concat(index,\"_Level\").concat(level):node.data.action===\"Loop\"?\"Loop_\".concat(index,\"_Level\").concat(level):node.data.action===\"Formatter\"?\"Formatter_\".concat(index,\"_Level\").concat(level):node.data.action===\"Filter\"?\"Filter_\".concat(index,\"_Level\").concat(level):node.data.action===\"Path\"?\"Path_\".concat(index,\"_Level\").concat(level):\"\".concat(node.data.action).concat(node.data.salesforceObject?\"_\".concat(node.data.salesforceObject):'',\"_\").concat(index,\"_Level\").concat(level);let displayLabel=node.data.action||(node.id===\"start\"?\"Start\":node.id===\"end\"?\"End\":\"Condition \".concat(index));updatedNodes[nodeIndex]=_objectSpread(_objectSpread({},node),{},{data:_objectSpread(_objectSpread({},node.data),{},{order,label,displayLabel})});// Process child nodes, but skip End node for now\nconst childEdges=currentEdges.filter(edge=>edge.source===nodeId&&edge.target!==\"end\");for(const edge of childEdges){assignOrders(edge.target);}};// Process all nodes except End\nassignOrders(\"start\");// Process any unvisited nodes (except End)\nfor(const node of currentNodes){if(!visited.has(node.id)&&node.id!==\"end\"){assignOrders(node.id);}}// Finally, process the End node with the highest level and order\nconst endNode=currentNodes.find(node=>node.id===\"end\");if(endNode){const endLevel=nodeLevels.get(\"end\")||1;const maxOrder=Math.max(...Array.from(nodeOrders.values()));const finalOrder=maxOrder+1;if(!levelNodeCounts[endLevel])levelNodeCounts[endLevel]={};levelNodeCounts[endLevel][\"End\"]=1;const endNodeIndex=updatedNodes.findIndex(n=>n.id===\"end\");if(endNodeIndex!==-1){updatedNodes[endNodeIndex]=_objectSpread(_objectSpread({},updatedNodes[endNodeIndex]),{},{data:_objectSpread(_objectSpread({},updatedNodes[endNodeIndex].data),{},{order:finalOrder,label:\"End\",displayLabel:\"End\"})});nodeOrders.set(\"end\",finalOrder);}}return updatedNodes;},[]);const onConnect=useCallback(params=>{const now=Date.now();if(now-lastConnectTimeRef.current<100){console.log(\"onConnect skipped due to debounce:\",params);return;}lastConnectTimeRef.current=now;const sourceNode=nodes.find(node=>node.id===params.source);const targetNode=nodes.find(node=>node.id===params.target);if(!sourceNode||!targetNode){console.warn(\"Source or target node not found:\",params);alert(\"Invalid connection: Source or target node not found.\");return;}// Prevent self-connections\nif(params.source===params.target){console.log(\"Self-connection blocked:\",params);alert(\"Cannot connect a node to itself.\");return;}if(params.target===\"start\"){alert(\"Cannot connect to the Start node.\");return;}if(params.source===\"end\"){alert(\"End node cannot have outgoing connections.\");return;}if(sourceNode.data.action===\"Path\"){var _sourceNode$data$labe;// Get all outgoing condition edges from the Path node\nconst outgoingConditionEdges=edges.filter(edge=>edge.source===params.source&&edge.conditionNodeId);console.log(\"Outgoing condition edges:\",outgoingConditionEdges);// Check for existing connection to the target via a condition node\nconst existingConnection=outgoingConditionEdges.find(edge=>{const conditionNode=nodes.find(n=>n.id===edge.target);const nextEdge=edges.find(e=>e.source===edge.target&&e.target===params.target);return conditionNode&&nextEdge;});if(existingConnection){alert(\"This Path node is already connected to the target node.\");return;}// Check for potential cycles\nconst createsCycle=(sourceId,targetId,edges)=>{const visited=new Set();const stack=[targetId];while(stack.length>0){const current=stack.pop();if(current===sourceId)return true;if(visited.has(current))continue;visited.add(current);const outgoing=edges.filter(e=>e.source===current);for(const edge of outgoing){stack.push(edge.target);}}return false;};if(createsCycle(params.source,params.target,edges)){alert(\"Cannot create a connection that forms a cycle.\");return;}// Limit Path nodes to two outgoing condition edges\nif(outgoingConditionEdges.length>=2){alert(\"Path nodes can have exactly two outgoing connections.\");return;}// Create a new condition node\nconst randomNum=Math.floor(Math.random()*10000);const conditionIndex=outgoingConditionEdges.length+1;const conditionNodeId=\"\".concat(sourceNode.id,\"_cond_\").concat(conditionIndex,\"_\").concat(randomNum);const midX=(sourceNode.position.x+targetNode.position.x)/2;const midY=(sourceNode.position.y+targetNode.position.y)/2;const sourceLevel=parseInt(((_sourceNode$data$labe=sourceNode.data.label.match(/Level(\\d+)/))===null||_sourceNode$data$labe===void 0?void 0:_sourceNode$data$labe[1])||1);const newConditionNode={id:conditionNodeId,type:\"custom\",position:{x:midX,y:midY},data:{label:\"Cond_\".concat(conditionIndex,\"_Level\").concat(sourceLevel+1),displayLabel:\"Condition \".concat(conditionIndex),action:\"Condition\",type:\"condition\",order:null,pathNodeId:params.source,targetNodeId:params.target,pathOption:\"Rules\"},draggable:true};const newEdges=[{id:\"e\".concat(params.source,\"-\").concat(conditionNodeId),source:params.source,target:conditionNodeId,type:\"default\",conditionNodeId},{id:\"e\".concat(conditionNodeId,\"-\").concat(params.target),source:conditionNodeId,target:params.target,type:\"default\",conditionNodeId}];// Update nodes and edges atomically\nsetNodes(nds=>{const updatedNodes=[...nds,newConditionNode];setEdges(eds=>{const updatedEdges=newEdges.reduce((acc,edge)=>addEdge(edge,acc),eds);console.log(\"Updated edges:\",updatedEdges);const orderedNodes=calculateNodeOrders(updatedNodes,updatedEdges);setNodes(orderedNodes);return updatedEdges;});return updatedNodes;});}else{// Non-Path nodes: Allow one outgoing edge\nconst hasOutgoingEdge=edges.some(edge=>edge.source===params.source&&!edge.conditionNodeId);if(hasOutgoingEdge){alert(\"Each node can have only one outgoing connection, except Path nodes.\");return;}const newEdge={id:\"e\".concat(params.source,\"-\").concat(params.target),source:params.source,target:params.target,type:\"default\"};setEdges(eds=>{const updatedEdges=addEdge(newEdge,eds);const updatedNodes=calculateNodeOrders(nodes,updatedEdges);setNodes(updatedNodes);return updatedEdges;});}},[edges,setEdges,nodes,setNodes,calculateNodeOrders]);const onEdgeDelete=useCallback(edgeId=>{setEdges(eds=>{const edge=eds.find(e=>e.id===edgeId);let newEdges=eds.filter(e=>e.id!==edgeId);if(edge.conditionNodeId){newEdges=newEdges.filter(e=>e.source!==edge.conditionNodeId&&e.target!==edge.conditionNodeId);setNodes(nds=>nds.filter(n=>n.id!==edge.conditionNodeId));}const updatedNodes=calculateNodeOrders(nodes,newEdges);setNodes(updatedNodes);return newEdges;});},[setEdges,setNodes,nodes,calculateNodeOrders]);const onDragOver=useCallback(event=>{event.preventDefault();event.dataTransfer.dropEffect=\"move\";},[]);const onDrop=useCallback(event=>{event.preventDefault();const type=event.dataTransfer.getData(\"application/reactflow-type\");const action=event.dataTransfer.getData(\"application/reactflow-id\");if(!type||!action)return;const reactFlowBounds=reactFlowWrapper.current.getBoundingClientRect();const position={x:event.clientX-reactFlowBounds.left-50,y:event.clientY-reactFlowBounds.top-25};const randomNum=Math.floor(Math.random()*10000);const nodeName=action.toLowerCase().replace(\"/\",\"_\");const newNode={id:\"\".concat(nodeName,\"_\").concat(randomNum),type:\"custom\",position,data:_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({label:\"\".concat(action,\"_Level0\"),displayLabel:action,type,action,order:null},type===\"action\"&&action===\"Create/Update\"?{enableConditions:false,returnLimit:\"\",salesforceObject:\"\",fieldMappings:[],conditions:[]}:{}),type===\"action\"&&action===\"Find\"?{salesforceObject:\"\",conditions:[],returnLimit:\"\",sortField:\"\",sortOrder:\"ASC\"}:{}),type===\"action\"&&action===\"Filter\"?{salesforceObject:\"\",conditions:[],returnLimit:\"\",sortField:\"\",sortOrder:\"ASC\"}:{}),type===\"utility\"&&action===\"Condition\"?{conditions:[]}:{}),type===\"utility\"&&action===\"Path\"?{pathOption:\"Rules\"}:{}),type===\"utility\"&&action===\"Loop\"?{loopConfig:{loopCollection:\"\",currentItemVariableName:\"\",maxIterations:\"\",loopVariables:{currentIndex:false,counter:false,indexBase:\"0\"}}}:{}),type===\"utility\"&&action===\"Formatter\"?{formatterConfig:{formatType:\"date\",operation:\"\",inputField:\"\",outputVariable:\"\",options:{}}}:{}),draggable:true};setNodes(nds=>{const updatedNodes=[...nds,newNode];const recalculatedNodes=calculateNodeOrders(updatedNodes,edges);return recalculatedNodes;});},[setNodes,edges,calculateNodeOrders]);const onNodeClick=useCallback((event,node)=>{if(node.id!==\"start\"){const hasIncomingEdge=edges.some(edge=>edge.target===node.id);if(!hasIncomingEdge){alert(\"Please connect the node with an incoming edge before configuring it.\");return;}}if([\"Create/Update\",\"Find\",\"Filter\",\"Condition\",\"Path\",\"Loop\",\"Formatter\"].includes(node.data.action)){setSelectedNode(node);}},[setSelectedNode,edges]);const nodeTypes=useMemo(()=>({custom:CustomNode}),[]);const edgeTypes=useMemo(()=>({default:props=>/*#__PURE__*/_jsx(CustomEdge,_objectSpread(_objectSpread({},props),{},{onEdgeDelete:onEdgeDelete}))}),[onEdgeDelete]);return/*#__PURE__*/_jsxs(\"div\",{className:\"w-full h-full relative overflow-hidden\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"absolute inset-0 bg-gradient-to-br from-slate-100 via-gray-50 to-slate-100 z-0\"}),/*#__PURE__*/_jsx(\"div\",{ref:reactFlowWrapper,className:\"w-full h-full relative z-10\",children:/*#__PURE__*/_jsxs(ReactFlow,{nodes:nodesWithDraggable,edges:edges,onNodesChange:handleNodesChange,onEdgesChange:onEdgesChange,onConnect:onConnect,onDragOver:onDragOver,onDrop:onDrop,onNodeClick:onNodeClick,nodeTypes:nodeTypes,edgeTypes:edgeTypes,fitView:false,className:\"w-full h-full\",proOptions:{hideAttribution:true},children:[/*#__PURE__*/_jsx(Controls,{className:\"bg-white/95 backdrop-blur-sm border border-slate-200 rounded-xl shadow-lg p-2\",style:{button:{backgroundColor:'transparent',border:'none',borderRadius:'8px',padding:'8px',margin:'2px',transition:'all 0.2s ease',color:'#475569'}}}),/*#__PURE__*/_jsx(Background,{color:\"#e2e8f0\",gap:24,size:1,variant:\"dots\",className:\"opacity-40\"})]})})]});};export default FlowDesigner;","map":{"version":3,"names":["React","useCallback","useMemo","useRef","useEffect","useState","ReactFlow","useNodesState","useEdgesState","addEdge","Controls","Background","Handle","motion","AnimatePresence","jsx","_jsx","jsxs","_jsxs","CustomNode","_ref","data","selected","id","isHovered","setIsHovered","getNodeStyles","baseStyles","type","concat","getIconColor","getIcon","shouldShowIcon","div","initial","scale","opacity","animate","whileHover","transition","duration","draggable","className","onMouseEnter","onMouseLeave","children","position","displayLabel","exit","CustomEdge","_ref2","sourceX","sourceY","targetX","targetY","style","onEdgeDelete","path","midX","midY","stdDeviation","result","in","stroke","strokeWidth","d","filter","undefined","g","onClick","cx","cy","r","x","y","textAnchor","FlowDesigner","_ref3","initialNodes","initialEdges","setSelectedNode","setNodes","setParentNodes","setEdges","setParentEdges","reactFlowWrapper","nodes","onNodesChange","edges","onEdgesChange","orderCounterRef","lastConnectTimeRef","window","deleteNode","nodeId","nds","n","eds","e","source","target","nodesWithDraggable","map","node","_objectSpread","handleNodesChange","changes","filteredChanges","change","dragging","find","calculateNodeOrders","currentNodes","currentEdges","updatedNodes","visited","Set","nodeOrders","Map","nodeLevels","current","levelNodeCounts","calculateLevels","level","arguments","length","has","add","currentLevel","get","set","Math","max","outgoingEdges","edge","endCurrentLevel","startNode","clear","assignOrders","targetLevel","nodeIndex","findIndex","order","actionKey","action","index","label","salesforceObject","childEdges","endNode","endLevel","maxOrder","Array","from","values","finalOrder","endNodeIndex","onConnect","params","now","Date","console","log","sourceNode","targetNode","warn","alert","_sourceNode$data$labe","outgoingConditionEdges","conditionNodeId","existingConnection","conditionNode","nextEdge","createsCycle","sourceId","targetId","stack","pop","outgoing","push","randomNum","floor","random","conditionIndex","sourceLevel","parseInt","match","newConditionNode","pathNodeId","targetNodeId","pathOption","newEdges","updatedEdges","reduce","acc","orderedNodes","hasOutgoingEdge","some","newEdge","edgeId","onDragOver","event","preventDefault","dataTransfer","dropEffect","onDrop","getData","reactFlowBounds","getBoundingClientRect","clientX","left","clientY","top","nodeName","toLowerCase","replace","newNode","enableConditions","returnLimit","fieldMappings","conditions","sortField","sortOrder","loopConfig","loopCollection","currentItemVariableName","maxIterations","loopVariables","currentIndex","counter","indexBase","formatterConfig","formatType","operation","inputField","outputVariable","options","recalculatedNodes","onNodeClick","hasIncomingEdge","includes","nodeTypes","custom","edgeTypes","default","props","ref","fitView","proOptions","hideAttribution","button","backgroundColor","border","borderRadius","padding","margin","color","gap","size","variant"],"sources":["C:/Users/MVclouds/Desktop/QuickForm/Merged Mapping QF/QuickForm/QuickForm-Romit-Kajal-Merge/quick-form-app/src/components/form-mapping/FlowDesigner.jsx"],"sourcesContent":["import React, { useCallback, useMemo, useRef, useEffect, useState } from \"react\";\r\nimport ReactFlow, { useNodesState, useEdgesState, addEdge, Controls, Background, Handle } from \"reactflow\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport \"reactflow/dist/style.css\";\r\n\r\nconst CustomNode = ({ data, selected, id }) => {\r\n  const [isHovered, setIsHovered] = useState(false);\r\n\r\n  const getNodeStyles = () => {\r\n    const baseStyles = \"relative backdrop-blur-sm border-2 rounded-2xl shadow-lg transition-all duration-300 hover:shadow-xl\";\r\n\r\n    switch (data.type) {\r\n      case \"condition\":\r\n        return `${baseStyles} bg-gradient-to-br from-indigo-50 to-indigo-100 border-indigo-300 hover:border-indigo-400`;\r\n      case \"loop\":\r\n        return `${baseStyles} bg-gradient-to-br from-violet-50 to-violet-100 border-violet-300 hover:border-violet-400`;\r\n      case \"formatter\":\r\n        return `${baseStyles} bg-gradient-to-br from-teal-50 to-teal-100 border-teal-300 hover:border-teal-400`;\r\n      case \"action\":\r\n        return `${baseStyles} bg-gradient-to-br from-rose-50 to-rose-100 border-rose-300 hover:border-rose-400`;\r\n      case \"utility\":\r\n        return `${baseStyles} bg-gradient-to-br from-amber-50 to-amber-100 border-amber-300 hover:border-amber-400`;\r\n      default:\r\n        return `${baseStyles} bg-gradient-to-br from-gray-50 to-gray-100 border-gray-300 hover:border-gray-400`;\r\n    }\r\n  };\r\n\r\n  const getIconColor = () => {\r\n    switch (data.type) {\r\n      case \"condition\": return \"text-indigo-600\";\r\n      case \"loop\": return \"text-violet-600\";\r\n      case \"formatter\": return \"text-teal-600\";\r\n      case \"action\": return \"text-rose-600\";\r\n      case \"utility\": return \"text-amber-600\";\r\n      default: return \"text-gray-600\";\r\n    }\r\n  };\r\n\r\n  const getIcon = () => {\r\n    switch (data.type) {\r\n      case \"condition\": return \"ðŸ”€\";\r\n      case \"loop\": return \"ðŸ”„\";\r\n      case \"formatter\": return \"ðŸŽ¨\";\r\n      case \"action\": return \"âš¡\";\r\n      case \"utility\": return \"ðŸ”§\";\r\n      default: return \"ðŸ“‹\";\r\n    }\r\n  };\r\n\r\n  // Don't show icons for start and end nodes\r\n  const shouldShowIcon = id !== \"start\" && id !== \"end\";\r\n\r\n  return (\r\n    <motion.div\r\n      initial={{ scale: 0.8, opacity: 0 }}\r\n      animate={{ scale: 1, opacity: 1 }}\r\n      whileHover={{ scale: 1.02 }}\r\n      transition={{ duration: 0.2 }}\r\n      draggable={data.draggable !== false}\r\n      className={`${getNodeStyles()} ${data.draggable === false ? \"cursor-default\" : \"cursor-grab\"} pointer-events-auto min-w-[120px] p-4 group`}\r\n      onMouseEnter={() => setIsHovered(true)}\r\n      onMouseLeave={() => setIsHovered(false)}\r\n    >\r\n      {/* Top Handle */}\r\n      <Handle\r\n        type=\"target\"\r\n        position=\"top\"\r\n        id=\"top\"\r\n        className=\"w-4 h-4 bg-gradient-to-r from-slate-400 to-slate-500 -top-2 left-1/2 transform -translate-x-1/2 border-2 border-white rounded-full shadow-md pointer-events-auto transition-all duration-200 hover:scale-110\"\r\n      />\r\n\r\n      {/* Node Content */}\r\n      <div className=\"flex justify-center items-center space-x-3\">\r\n        {shouldShowIcon && (\r\n          <span className={`text-lg ${getIconColor()}`}>{getIcon()}</span>\r\n        )}\r\n        <div className=\"font-semibold text-slate-700 text-sm leading-tight\">\r\n          {data.displayLabel}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Hover Effect */}\r\n      <AnimatePresence>\r\n        {isHovered && (\r\n          <motion.div\r\n            initial={{ opacity: 0, scale: 0.8 }}\r\n            animate={{ opacity: 1, scale: 1 }}\r\n            exit={{ opacity: 0, scale: 0.8 }}\r\n            className=\"absolute inset-0 bg-gradient-to-br from-white/20 to-transparent rounded-2xl pointer-events-none\"\r\n          />\r\n        )}\r\n      </AnimatePresence>\r\n\r\n      {/* Bottom Handle */}\r\n      <Handle\r\n        type=\"source\"\r\n        position=\"bottom\"\r\n        id=\"bottom\"\r\n        className=\"w-4 h-4 bg-gradient-to-r from-slate-400 to-slate-500 -bottom-2 left-1/2 transform -translate-x-1/2 border-2 border-white rounded-full shadow-md pointer-events-auto transition-all duration-200 hover:scale-110\"\r\n      />\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nconst CustomEdge = ({ id, sourceX, sourceY, targetX, targetY, style = {}, onEdgeDelete }) => {\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const path = `M${sourceX},${sourceY} L${targetX},${targetY}`;\r\n  const midX = (sourceX + targetX) / 2;\r\n  const midY = (sourceY + targetY) / 2;\r\n\r\n  return (\r\n    <g\r\n      onMouseEnter={() => setIsHovered(true)}\r\n      onMouseLeave={() => setIsHovered(false)}\r\n      className=\"pointer-events-auto\"\r\n    >\r\n      <defs>\r\n        <filter id={`glow-${id}`}>\r\n          <feGaussianBlur stdDeviation=\"2\" result=\"coloredBlur\" />\r\n          <feMerge>\r\n            <feMergeNode in=\"coloredBlur\" />\r\n            <feMergeNode in=\"SourceGraphic\" />\r\n          </feMerge>\r\n        </filter>\r\n      </defs>\r\n\r\n      <path\r\n        id={id}\r\n        style={style}\r\n        className={`react-flow__edge-path fill-none stroke-3 transition-all duration-300 ${isHovered ? 'filter drop-shadow-lg' : ''}`}\r\n        stroke=\"#64748b\"\r\n        strokeWidth={isHovered ? \"4\" : \"2\"}\r\n        d={path}\r\n        filter={isHovered ? `url(#glow-${id})` : undefined}\r\n      />\r\n\r\n      <AnimatePresence>\r\n        {isHovered && (\r\n          <motion.g\r\n            initial={{ scale: 0, opacity: 0 }}\r\n            animate={{ scale: 1, opacity: 1 }}\r\n            exit={{ scale: 0, opacity: 0 }}\r\n            className=\"cursor-pointer\"\r\n            onClick={() => onEdgeDelete(id)}\r\n          >\r\n            <circle\r\n              cx={midX}\r\n              cy={midY}\r\n              r=\"16\"\r\n              className=\"fill-red-500 stroke-white stroke-2 filter drop-shadow-lg\"\r\n            />\r\n            <text\r\n              x={midX}\r\n              y={midY + 5}\r\n              className=\"fill-white text-center text-sm font-bold\"\r\n              textAnchor=\"middle\"\r\n            >\r\n              Ã—\r\n            </text>\r\n          </motion.g>\r\n        )}\r\n      </AnimatePresence>\r\n    </g>\r\n  );\r\n};\r\n\r\nconst FlowDesigner = ({ initialNodes, initialEdges, setSelectedNode, setNodes: setParentNodes, setEdges: setParentEdges }) => {\r\n  const reactFlowWrapper = useRef(null);\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\r\n  const orderCounterRef = useRef(1);\r\n  const lastConnectTimeRef = useRef(0);\r\n\r\n  useEffect(() => {\r\n    setParentNodes(nodes);\r\n    setParentEdges(edges);\r\n  }, [nodes, edges, setParentNodes, setParentEdges]);\r\n\r\n  // Add delete node function to window for access from CustomNode\r\n  useEffect(() => {\r\n    window.deleteNode = (nodeId) => {\r\n      setNodes((nds) => nds.filter((n) => n.id !== nodeId));\r\n      setEdges((eds) => eds.filter((e) => e.source !== nodeId && e.target !== nodeId));\r\n    };\r\n    return () => {\r\n      delete window.deleteNode;\r\n    };\r\n  }, [setNodes, setEdges]);\r\n\r\n  const nodesWithDraggable = nodes.map((node) => ({\r\n    ...node,\r\n    draggable: node.draggable !== false,\r\n  }));\r\n\r\n  const handleNodesChange = useCallback(\r\n    (changes) => {\r\n      const filteredChanges = changes.filter((change) => {\r\n        if (change.type === \"position\" && change.dragging) {\r\n          const node = nodes.find((n) => n.id === change.id);\r\n          if (node && node.draggable === false) return false;\r\n        }\r\n        return true;\r\n      });\r\n      onNodesChange(filteredChanges);\r\n    },\r\n    [nodes, onNodesChange]\r\n  );\r\n\r\n  const calculateNodeOrders = useCallback((currentNodes, currentEdges) => {\r\n    const updatedNodes = [...currentNodes];\r\n    const visited = new Set();\r\n    const nodeOrders = new Map();\r\n    const nodeLevels = new Map();\r\n    orderCounterRef.current = 1;\r\n    const levelNodeCounts = {};\r\n\r\n    // First pass: Calculate levels for all nodes\r\n    const calculateLevels = (nodeId, level = 1) => {\r\n      if (!nodeId || visited.has(nodeId)) return;\r\n      visited.add(nodeId);\r\n      \r\n      // Set level for current node (use maximum level if already set)\r\n      const currentLevel = nodeLevels.get(nodeId) || 0;\r\n      nodeLevels.set(nodeId, Math.max(currentLevel, level));\r\n\r\n      // Process outgoing edges\r\n      const outgoingEdges = currentEdges.filter(edge => edge.source === nodeId);\r\n      \r\n      for (const edge of outgoingEdges) {\r\n        if (edge.target === \"end\") {\r\n          // Don't process End node yet, just mark its minimum level\r\n          const endCurrentLevel = nodeLevels.get(\"end\") || 0;\r\n          nodeLevels.set(\"end\", Math.max(endCurrentLevel, level + 1));\r\n        } else {\r\n          calculateLevels(edge.target, level + 1);\r\n        }\r\n      }\r\n    };\r\n\r\n    // Start level calculation from start node\r\n    const startNode = currentNodes.find(node => node.id === \"start\");\r\n    if (startNode) {\r\n      visited.clear();\r\n      calculateLevels(startNode.id);\r\n    }\r\n\r\n    // Second pass: Assign orders based on levels\r\n    visited.clear();\r\n    const assignOrders = (nodeId, targetLevel = null) => {\r\n      if (!nodeId || visited.has(nodeId)) return;\r\n      \r\n      const nodeIndex = updatedNodes.findIndex(n => n.id === nodeId);\r\n      if (nodeIndex === -1) return;\r\n      \r\n      const node = updatedNodes[nodeIndex];\r\n      const level = targetLevel !== null ? targetLevel : (nodeLevels.get(nodeId) || 1);\r\n      \r\n      visited.add(nodeId);\r\n\r\n      // Assign order if not already assigned\r\n      let order;\r\n      if (nodeOrders.has(nodeId)) {\r\n        order = nodeOrders.get(nodeId);\r\n      } else {\r\n        order = orderCounterRef.current++;\r\n        nodeOrders.set(nodeId, order);\r\n      }\r\n\r\n      // Track node counts at each level for labeling\r\n      if (!levelNodeCounts[level]) levelNodeCounts[level] = {};\r\n      const actionKey = node.data.action || (node.id === \"start\" ? \"Start\" : node.id === \"end\" ? \"End\" : \"Condition\");\r\n      levelNodeCounts[level][actionKey] = (levelNodeCounts[level][actionKey] || 0) + 1;\r\n      const index = levelNodeCounts[level][actionKey];\r\n\r\n      // Generate labels\r\n      let label = node.id === \"start\" ? \"Start\" :\r\n        node.id === \"end\" ? \"End\" :\r\n          node.data.action === \"Condition\" ? `Cond_${index}_Level${level}` :\r\n            node.data.action === \"Loop\" ? `Loop_${index}_Level${level}` :\r\n              node.data.action === \"Formatter\" ? `Formatter_${index}_Level${level}` :\r\n                node.data.action === \"Filter\" ? `Filter_${index}_Level${level}` :\r\n                  node.data.action === \"Path\" ? `Path_${index}_Level${level}` :\r\n                    `${node.data.action}${node.data.salesforceObject ? `_${node.data.salesforceObject}` : ''}_${index}_Level${level}`;\r\n      \r\n      let displayLabel = node.data.action || (node.id === \"start\" ? \"Start\" : node.id === \"end\" ? \"End\" : `Condition ${index}`);\r\n\r\n      updatedNodes[nodeIndex] = {\r\n        ...node,\r\n        data: { ...node.data, order, label, displayLabel },\r\n      };\r\n\r\n      // Process child nodes, but skip End node for now\r\n      const childEdges = currentEdges.filter(edge => edge.source === nodeId && edge.target !== \"end\");\r\n      for (const edge of childEdges) {\r\n        assignOrders(edge.target);\r\n      }\r\n    };\r\n\r\n    // Process all nodes except End\r\n    assignOrders(\"start\");\r\n\r\n    // Process any unvisited nodes (except End)\r\n    for (const node of currentNodes) {\r\n      if (!visited.has(node.id) && node.id !== \"end\") {\r\n        assignOrders(node.id);\r\n      }\r\n    }\r\n\r\n    // Finally, process the End node with the highest level and order\r\n    const endNode = currentNodes.find(node => node.id === \"end\");\r\n    if (endNode) {\r\n      const endLevel = nodeLevels.get(\"end\") || 1;\r\n      const maxOrder = Math.max(...Array.from(nodeOrders.values()));\r\n      const finalOrder = maxOrder + 1;\r\n      \r\n      if (!levelNodeCounts[endLevel]) levelNodeCounts[endLevel] = {};\r\n      levelNodeCounts[endLevel][\"End\"] = 1;\r\n      \r\n      const endNodeIndex = updatedNodes.findIndex(n => n.id === \"end\");\r\n      if (endNodeIndex !== -1) {\r\n        updatedNodes[endNodeIndex] = {\r\n          ...updatedNodes[endNodeIndex],\r\n          data: {\r\n            ...updatedNodes[endNodeIndex].data,\r\n            order: finalOrder,\r\n            label: \"End\",\r\n            displayLabel: \"End\",\r\n          },\r\n        };\r\n        nodeOrders.set(\"end\", finalOrder);\r\n      }\r\n    }\r\n\r\n    return updatedNodes;\r\n  }, []);\r\n\r\n  const onConnect = useCallback(\r\n    (params) => {\r\n      const now = Date.now();\r\n      if (now - lastConnectTimeRef.current < 100) {\r\n        console.log(\"onConnect skipped due to debounce:\", params);\r\n        return;\r\n      }\r\n      lastConnectTimeRef.current = now;\r\n\r\n      const sourceNode = nodes.find((node) => node.id === params.source);\r\n      const targetNode = nodes.find((node) => node.id === params.target);\r\n\r\n      if (!sourceNode || !targetNode) {\r\n        console.warn(\"Source or target node not found:\", params);\r\n        alert(\"Invalid connection: Source or target node not found.\");\r\n        return;\r\n      }\r\n\r\n      // Prevent self-connections\r\n      if (params.source === params.target) {\r\n        console.log(\"Self-connection blocked:\", params);\r\n        alert(\"Cannot connect a node to itself.\");\r\n        return;\r\n      }\r\n\r\n      if (params.target === \"start\") {\r\n        alert(\"Cannot connect to the Start node.\");\r\n        return;\r\n      }\r\n\r\n      if (params.source === \"end\") {\r\n        alert(\"End node cannot have outgoing connections.\");\r\n        return;\r\n      }\r\n\r\n      if (sourceNode.data.action === \"Path\") {\r\n        // Get all outgoing condition edges from the Path node\r\n        const outgoingConditionEdges = edges.filter(\r\n          (edge) => edge.source === params.source && edge.conditionNodeId\r\n        );\r\n        console.log(\"Outgoing condition edges:\", outgoingConditionEdges);\r\n\r\n        // Check for existing connection to the target via a condition node\r\n        const existingConnection = outgoingConditionEdges.find((edge) => {\r\n          const conditionNode = nodes.find((n) => n.id === edge.target);\r\n          const nextEdge = edges.find((e) => e.source === edge.target && e.target === params.target);\r\n          return conditionNode && nextEdge;\r\n        });\r\n\r\n        if (existingConnection) {\r\n          alert(\"This Path node is already connected to the target node.\");\r\n          return;\r\n        }\r\n\r\n        // Check for potential cycles\r\n        const createsCycle = (sourceId, targetId, edges) => {\r\n          const visited = new Set();\r\n          const stack = [targetId];\r\n          while (stack.length > 0) {\r\n            const current = stack.pop();\r\n            if (current === sourceId) return true;\r\n            if (visited.has(current)) continue;\r\n            visited.add(current);\r\n            const outgoing = edges.filter((e) => e.source === current);\r\n            for (const edge of outgoing) {\r\n              stack.push(edge.target);\r\n            }\r\n          }\r\n          return false;\r\n        };\r\n\r\n        if (createsCycle(params.source, params.target, edges)) {\r\n          alert(\"Cannot create a connection that forms a cycle.\");\r\n          return;\r\n        }\r\n\r\n        // Limit Path nodes to two outgoing condition edges\r\n        if (outgoingConditionEdges.length >= 2) {\r\n          alert(\"Path nodes can have exactly two outgoing connections.\");\r\n          return;\r\n        }\r\n\r\n        // Create a new condition node\r\n        const randomNum = Math.floor(Math.random() * 10000);\r\n        const conditionIndex = outgoingConditionEdges.length + 1;\r\n        const conditionNodeId = `${sourceNode.id}_cond_${conditionIndex}_${randomNum}`;\r\n        const midX = (sourceNode.position.x + targetNode.position.x) / 2;\r\n        const midY = (sourceNode.position.y + targetNode.position.y) / 2;\r\n        const sourceLevel = parseInt(sourceNode.data.label.match(/Level(\\d+)/)?.[1] || 1);\r\n\r\n        const newConditionNode = {\r\n          id: conditionNodeId,\r\n          type: \"custom\",\r\n          position: { x: midX, y: midY },\r\n          data: {\r\n            label: `Cond_${conditionIndex}_Level${sourceLevel + 1}`,\r\n            displayLabel: `Condition ${conditionIndex}`,\r\n            action: \"Condition\",\r\n            type: \"condition\",\r\n            order: null,\r\n            pathNodeId: params.source,\r\n            targetNodeId: params.target,\r\n            pathOption: \"Rules\",\r\n          },\r\n          draggable: true,\r\n        };\r\n\r\n        const newEdges = [\r\n          {\r\n            id: `e${params.source}-${conditionNodeId}`,\r\n            source: params.source,\r\n            target: conditionNodeId,\r\n            type: \"default\",\r\n            conditionNodeId,\r\n          },\r\n          {\r\n            id: `e${conditionNodeId}-${params.target}`,\r\n            source: conditionNodeId,\r\n            target: params.target,\r\n            type: \"default\",\r\n            conditionNodeId,\r\n          },\r\n        ];\r\n\r\n        // Update nodes and edges atomically\r\n        setNodes((nds) => {\r\n          const updatedNodes = [...nds, newConditionNode];\r\n          setEdges((eds) => {\r\n            const updatedEdges = newEdges.reduce((acc, edge) => addEdge(edge, acc), eds);\r\n            console.log(\"Updated edges:\", updatedEdges);\r\n            const orderedNodes = calculateNodeOrders(updatedNodes, updatedEdges);\r\n            setNodes(orderedNodes);\r\n            return updatedEdges;\r\n          });\r\n          return updatedNodes;\r\n        });\r\n      } else {\r\n        // Non-Path nodes: Allow one outgoing edge\r\n        const hasOutgoingEdge = edges.some(\r\n          (edge) => edge.source === params.source && !edge.conditionNodeId\r\n        );\r\n        if (hasOutgoingEdge) {\r\n          alert(\"Each node can have only one outgoing connection, except Path nodes.\");\r\n          return;\r\n        }\r\n\r\n        const newEdge = {\r\n          id: `e${params.source}-${params.target}`,\r\n          source: params.source,\r\n          target: params.target,\r\n          type: \"default\",\r\n        };\r\n\r\n        setEdges((eds) => {\r\n          const updatedEdges = addEdge(newEdge, eds);\r\n          const updatedNodes = calculateNodeOrders(nodes, updatedEdges);\r\n          setNodes(updatedNodes);\r\n          return updatedEdges;\r\n        });\r\n      }\r\n    },\r\n    [edges, setEdges, nodes, setNodes, calculateNodeOrders]\r\n  );\r\n\r\n  const onEdgeDelete = useCallback(\r\n    (edgeId) => {\r\n      setEdges((eds) => {\r\n        const edge = eds.find((e) => e.id === edgeId);\r\n        let newEdges = eds.filter((e) => e.id !== edgeId);\r\n        if (edge.conditionNodeId) {\r\n          newEdges = newEdges.filter((e) => e.source !== edge.conditionNodeId && e.target !== edge.conditionNodeId);\r\n          setNodes((nds) => nds.filter((n) => n.id !== edge.conditionNodeId));\r\n        }\r\n        const updatedNodes = calculateNodeOrders(nodes, newEdges);\r\n        setNodes(updatedNodes);\r\n        return newEdges;\r\n      });\r\n    },\r\n    [setEdges, setNodes, nodes, calculateNodeOrders]\r\n  );\r\n\r\n  const onDragOver = useCallback((event) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = \"move\";\r\n  }, []);\r\n\r\n  const onDrop = useCallback(\r\n    (event) => {\r\n      event.preventDefault();\r\n      const type = event.dataTransfer.getData(\"application/reactflow-type\");\r\n      const action = event.dataTransfer.getData(\"application/reactflow-id\");\r\n      if (!type || !action) return;\r\n\r\n      const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n      const position = { x: event.clientX - reactFlowBounds.left - 50, y: event.clientY - reactFlowBounds.top - 25 };\r\n      const randomNum = Math.floor(Math.random() * 10000);\r\n      const nodeName = action.toLowerCase().replace(\"/\", \"_\");\r\n      const newNode = {\r\n        id: `${nodeName}_${randomNum}`,\r\n        type: \"custom\",\r\n        position,\r\n        data: {\r\n          label: `${action}_Level0`,\r\n          displayLabel: action,\r\n          type,\r\n          action,\r\n          order: null,\r\n          ...(type === \"action\" && action === \"Create/Update\" ? {\r\n            enableConditions: false,\r\n            returnLimit: \"\",\r\n            salesforceObject: \"\",\r\n            fieldMappings: [],\r\n            conditions: []\r\n          } : {}),\r\n          ...(type === \"action\" && action === \"Find\" ? {\r\n            salesforceObject: \"\",\r\n            conditions: [],\r\n            returnLimit: \"\",\r\n            sortField: \"\",\r\n            sortOrder: \"ASC\"\r\n          } : {}),\r\n          ...(type === \"action\" && action === \"Filter\" ? {\r\n            salesforceObject: \"\",\r\n            conditions: [],\r\n            returnLimit: \"\",\r\n            sortField: \"\",\r\n            sortOrder: \"ASC\"\r\n          } : {}),\r\n          ...(type === \"utility\" && action === \"Condition\" ? {\r\n            conditions: []\r\n          } : {}),\r\n          ...(type === \"utility\" && action === \"Path\" ? { pathOption: \"Rules\" } : {}),\r\n          ...(type === \"utility\" && action === \"Loop\" ? {\r\n            loopConfig: {\r\n              loopCollection: \"\",\r\n              currentItemVariableName: \"\",\r\n              maxIterations: \"\",\r\n              loopVariables: {\r\n                currentIndex: false,\r\n                counter: false,\r\n                indexBase: \"0\"\r\n              }\r\n            }\r\n          } : {}),\r\n          ...(type === \"utility\" && action === \"Formatter\" ? {\r\n            formatterConfig: {\r\n              formatType: \"date\",\r\n              operation: \"\",\r\n              inputField: \"\",\r\n              outputVariable: \"\",\r\n              options: {}\r\n            }\r\n          } : {}),\r\n        },\r\n        draggable: true,\r\n      };\r\n      setNodes((nds) => {\r\n        const updatedNodes = [...nds, newNode];\r\n        const recalculatedNodes = calculateNodeOrders(updatedNodes, edges);\r\n        return recalculatedNodes;\r\n      });\r\n    },\r\n    [setNodes, edges, calculateNodeOrders]\r\n  );\r\n\r\n  const onNodeClick = useCallback(\r\n    (event, node) => {\r\n      if (node.id !== \"start\") {\r\n        const hasIncomingEdge = edges.some((edge) => edge.target === node.id);\r\n        if (!hasIncomingEdge) {\r\n          alert(\"Please connect the node with an incoming edge before configuring it.\");\r\n          return;\r\n        }\r\n      }\r\n      if ([\"Create/Update\", \"Find\", \"Filter\", \"Condition\", \"Path\", \"Loop\", \"Formatter\"].includes(node.data.action)) {\r\n        setSelectedNode(node);\r\n      }\r\n    },\r\n    [setSelectedNode, edges]\r\n  );\r\n\r\n  const nodeTypes = useMemo(() => ({ custom: CustomNode }), []);\r\n  const edgeTypes = useMemo(() => ({ default: (props) => <CustomEdge {...props} onEdgeDelete={onEdgeDelete} /> }), [onEdgeDelete]);\r\n\r\n  return (\r\n    <div className=\"w-full h-full relative overflow-hidden\">\r\n      {/* Gradient Background */}\r\n      <div className=\"absolute inset-0 bg-gradient-to-br from-slate-100 via-gray-50 to-slate-100 z-0\" />\r\n\r\n      {/* Flow Container */}\r\n      <div ref={reactFlowWrapper} className=\"w-full h-full relative z-10\">\r\n        <ReactFlow\r\n          nodes={nodesWithDraggable}\r\n          edges={edges}\r\n          onNodesChange={handleNodesChange}\r\n          onEdgesChange={onEdgesChange}\r\n          onConnect={onConnect}\r\n          onDragOver={onDragOver}\r\n          onDrop={onDrop}\r\n          onNodeClick={onNodeClick}\r\n          nodeTypes={nodeTypes}\r\n          edgeTypes={edgeTypes}\r\n          fitView={false}\r\n          className=\"w-full h-full\"\r\n          proOptions={{ hideAttribution: true }}\r\n        >\r\n          <Controls\r\n            className=\"bg-white/95 backdrop-blur-sm border border-slate-200 rounded-xl shadow-lg p-2\"\r\n            style={{\r\n              button: {\r\n                backgroundColor: 'transparent',\r\n                border: 'none',\r\n                borderRadius: '8px',\r\n                padding: '8px',\r\n                margin: '2px',\r\n                transition: 'all 0.2s ease',\r\n                color: '#475569'\r\n              }\r\n            }}\r\n          />\r\n          <Background\r\n            color=\"#e2e8f0\"\r\n            gap={24}\r\n            size={1}\r\n            variant=\"dots\"\r\n            className=\"opacity-40\"\r\n          />\r\n        </ReactFlow>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FlowDesigner;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
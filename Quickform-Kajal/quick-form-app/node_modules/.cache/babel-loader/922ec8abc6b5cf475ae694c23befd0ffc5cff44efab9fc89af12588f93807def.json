{"ast":null,"code":"'use client';\n\nimport remove from 'lodash/remove';\n/**\n * get all ancestor nodes of given node\n * @param {*} node\n */\nexport function getNodeParents(node, parentKey, valueKey) {\n  if (parentKey === void 0) {\n    parentKey = 'parent';\n  }\n  var parents = [];\n  var _traverse = function traverse(node) {\n    if (node !== null && node !== void 0 && node[parentKey]) {\n      _traverse(node[parentKey]);\n      if (valueKey) {\n        parents.push(node[parentKey][valueKey]);\n      } else {\n        parents.push(node[parentKey]);\n      }\n    }\n  };\n  _traverse(node);\n  return parents;\n}\n\n/**\n * Check if any child nodes are selected.\n * @param node\n * @param value\n * @param itemKeys\n */\nvar _isSomeChildChecked = function isSomeChildChecked(node, value, itemKeys) {\n  var childrenKey = itemKeys.childrenKey,\n    valueKey = itemKeys.valueKey;\n  if (!node[childrenKey] || !value) {\n    return false;\n  }\n  return node[childrenKey].some(function (child) {\n    var _child$childrenKey;\n    if (value.some(function (n) {\n      return n === child[valueKey];\n    })) {\n      return true;\n    }\n    if ((_child$childrenKey = child[childrenKey]) !== null && _child$childrenKey !== void 0 && _child$childrenKey.length) {\n      return _isSomeChildChecked(child, value, itemKeys);\n    }\n    return false;\n  });\n};\n\n/**\n * Check if the parent is selected.\n * @param node\n * @param value\n * @param itemKeys\n */\nexport { _isSomeChildChecked as isSomeChildChecked };\nvar _isSomeParentChecked = function isSomeParentChecked(node, value, itemKeys) {\n  var valueKey = itemKeys.valueKey;\n  if (!value) {\n    return false;\n  }\n  if (value.some(function (n) {\n    return n === node[valueKey];\n  })) {\n    return true;\n  }\n  if (node.parent) {\n    return _isSomeParentChecked(node.parent, value, itemKeys);\n  }\n  return false;\n};\nexport { _isSomeParentChecked as isSomeParentChecked };\nexport var getOtherItemValuesByUnselectChild = function getOtherItemValuesByUnselectChild(itemNode, value, itemKeys) {\n  var valueKey = itemKeys.valueKey,\n    childrenKey = itemKeys.childrenKey;\n  var parentValues = [];\n  var itemValues = [];\n\n  // Find the parent node of the current node by value\n  function findParent(item) {\n    parentValues.push(item[valueKey]);\n    if (value.some(function (v) {\n      return v === item[valueKey];\n    })) {\n      return item;\n    }\n    if (item.parent) {\n      var p = findParent(item.parent);\n      if (p) {\n        return p;\n      }\n    }\n    return null;\n  }\n\n  // Get child nodes through parent node\n  function pushChildValue(item) {\n    if (!item[childrenKey]) {\n      return;\n    }\n    item[childrenKey].forEach(function (n) {\n      // Determine whether it is a direct parent\n      if (parentValues.some(function (v) {\n        return v === n[valueKey];\n      }) && n[childrenKey]) {\n        pushChildValue(n);\n      } else if (n[valueKey] !== itemNode[valueKey]) {\n        itemValues.push(n[valueKey]);\n      }\n    });\n  }\n  var parent = findParent(itemNode);\n  if (!parent) {\n    return [];\n  }\n  pushChildValue(parent);\n  return itemValues;\n};\n\n/**\n * Remove the values of all children.\n */\nvar _removeAllChildrenValue = function removeAllChildrenValue(value, item, itemKeys) {\n  var valueKey = itemKeys.valueKey,\n    childrenKey = itemKeys.childrenKey;\n  var removedValue = [];\n  if (!item[childrenKey]) {\n    return;\n  }\n  item[childrenKey].forEach(function (n) {\n    removedValue = removedValue.concat(remove(value, function (v) {\n      return v === n[valueKey];\n    }));\n    if (n[childrenKey]) {\n      _removeAllChildrenValue(value, n, itemKeys);\n    }\n  });\n  return removedValue;\n};\nexport { _removeAllChildrenValue as removeAllChildrenValue };","map":{"version":3,"names":["remove","getNodeParents","node","parentKey","valueKey","parents","_traverse","traverse","push","_isSomeChildChecked","isSomeChildChecked","value","itemKeys","childrenKey","some","child","_child$childrenKey","n","length","_isSomeParentChecked","isSomeParentChecked","parent","getOtherItemValuesByUnselectChild","itemNode","parentValues","itemValues","findParent","item","v","p","pushChildValue","forEach","_removeAllChildrenValue","removeAllChildrenValue","removedValue","concat"],"sources":["C:/Users/MVclouds/Desktop/QuickForm/Merged Mapping QF/QuickForm/QuickForm-Romit-Kajal-Merge/quick-form-app/node_modules/rsuite/esm/MultiCascadeTree/utils.js"],"sourcesContent":["'use client';\nimport remove from 'lodash/remove';\n/**\n * get all ancestor nodes of given node\n * @param {*} node\n */\nexport function getNodeParents(node, parentKey, valueKey) {\n  if (parentKey === void 0) {\n    parentKey = 'parent';\n  }\n  var parents = [];\n  var _traverse = function traverse(node) {\n    if (node !== null && node !== void 0 && node[parentKey]) {\n      _traverse(node[parentKey]);\n      if (valueKey) {\n        parents.push(node[parentKey][valueKey]);\n      } else {\n        parents.push(node[parentKey]);\n      }\n    }\n  };\n  _traverse(node);\n  return parents;\n}\n\n/**\n * Check if any child nodes are selected.\n * @param node\n * @param value\n * @param itemKeys\n */\nvar _isSomeChildChecked = function isSomeChildChecked(node, value, itemKeys) {\n  var childrenKey = itemKeys.childrenKey,\n    valueKey = itemKeys.valueKey;\n  if (!node[childrenKey] || !value) {\n    return false;\n  }\n  return node[childrenKey].some(function (child) {\n    var _child$childrenKey;\n    if (value.some(function (n) {\n      return n === child[valueKey];\n    })) {\n      return true;\n    }\n    if ((_child$childrenKey = child[childrenKey]) !== null && _child$childrenKey !== void 0 && _child$childrenKey.length) {\n      return _isSomeChildChecked(child, value, itemKeys);\n    }\n    return false;\n  });\n};\n\n/**\n * Check if the parent is selected.\n * @param node\n * @param value\n * @param itemKeys\n */\nexport { _isSomeChildChecked as isSomeChildChecked };\nvar _isSomeParentChecked = function isSomeParentChecked(node, value, itemKeys) {\n  var valueKey = itemKeys.valueKey;\n  if (!value) {\n    return false;\n  }\n  if (value.some(function (n) {\n    return n === node[valueKey];\n  })) {\n    return true;\n  }\n  if (node.parent) {\n    return _isSomeParentChecked(node.parent, value, itemKeys);\n  }\n  return false;\n};\nexport { _isSomeParentChecked as isSomeParentChecked };\nexport var getOtherItemValuesByUnselectChild = function getOtherItemValuesByUnselectChild(itemNode, value, itemKeys) {\n  var valueKey = itemKeys.valueKey,\n    childrenKey = itemKeys.childrenKey;\n  var parentValues = [];\n  var itemValues = [];\n\n  // Find the parent node of the current node by value\n  function findParent(item) {\n    parentValues.push(item[valueKey]);\n    if (value.some(function (v) {\n      return v === item[valueKey];\n    })) {\n      return item;\n    }\n    if (item.parent) {\n      var p = findParent(item.parent);\n      if (p) {\n        return p;\n      }\n    }\n    return null;\n  }\n\n  // Get child nodes through parent node\n  function pushChildValue(item) {\n    if (!item[childrenKey]) {\n      return;\n    }\n    item[childrenKey].forEach(function (n) {\n      // Determine whether it is a direct parent\n      if (parentValues.some(function (v) {\n        return v === n[valueKey];\n      }) && n[childrenKey]) {\n        pushChildValue(n);\n      } else if (n[valueKey] !== itemNode[valueKey]) {\n        itemValues.push(n[valueKey]);\n      }\n    });\n  }\n  var parent = findParent(itemNode);\n  if (!parent) {\n    return [];\n  }\n  pushChildValue(parent);\n  return itemValues;\n};\n\n/**\n * Remove the values of all children.\n */\nvar _removeAllChildrenValue = function removeAllChildrenValue(value, item, itemKeys) {\n  var valueKey = itemKeys.valueKey,\n    childrenKey = itemKeys.childrenKey;\n  var removedValue = [];\n  if (!item[childrenKey]) {\n    return;\n  }\n  item[childrenKey].forEach(function (n) {\n    removedValue = removedValue.concat(remove(value, function (v) {\n      return v === n[valueKey];\n    }));\n    if (n[childrenKey]) {\n      _removeAllChildrenValue(value, n, itemKeys);\n    }\n  });\n  return removedValue;\n};\nexport { _removeAllChildrenValue as removeAllChildrenValue };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}